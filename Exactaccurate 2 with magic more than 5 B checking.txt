restart:
with(ListTools):
with(StringTools):
#char1 := "01000001":

convertbinarytointeger := proc(xx)
if xx = "0" then
 return 0:
else
 return 1:
end if:
end proc:
#chara := "01100001":
#charr := "01110010":

filterchar := proc(xx)
 if convert(xx, decimal, binary) >= 48 and convert(xx, decimal, binary) <= 57 then
  return StringTools:-Char(convert(xx, decimal, binary));
 elif convert(xx, decimal, binary) >= 65 and convert(xx, decimal, binary) <= 90 then
  return StringTools:-Char(convert(xx, decimal, binary));
 elif convert(xx, decimal, binary) >= 97 and convert(xx, decimal, binary) <= 122 then
  return StringTools:-Char(convert(xx, decimal, binary));
 end if:
end proc:

filternumber := proc(xx)
 if convert(xx, decimal, binary) >= 48 and convert(xx, decimal, binary) <= 57 then
  return StringTools:-Char(convert(xx, decimal, binary));
 end if:
end proc:

filtersmallchar := proc(xx)
 if convert(xx, decimal, binary) >= 97 and convert(xx, decimal, binary) <= 122 then
  return StringTools:-Char(convert(xx, decimal, binary));
 end if:
end proc:

forecastonechar := proc(char1)
local result, mm, aa1, aa2:
result := "":
for mm from 1 to length(char1)-1 do
aa1 := convertbinarytointeger(char1[mm]):
aa2 := convertbinarytointeger(char1[mm+1]):
if aa1 = 0 and aa2 = 1 then
 #print("r",result):
 result := map(xx->cat(op(Flatten([xx])),"1"), result):
else
 #print("r",result):
 result := [op(Flatten([map(xx->cat(op(Flatten([xx])),"0"), result)])),op(Flatten([map(xx->cat(op(Flatten([xx])),"1"), result)]))]:
end if:
od:
end proc:

forecasttwochar := proc(char1,char2)
local result, mm, aa1, aa2:
result := "":
for mm from 1 to length(char1) do
aa1 := convertbinarytointeger(char1[mm]):
aa2 := convertbinarytointeger(char2[mm]):
if aa1 = 0 and aa2 = 1 then
 #print("r",result):
 result := map(xx->cat(op(Flatten([xx])),"1"), result):
else
 #print("r",result):
 result := [op(Flatten([map(xx->cat(op(Flatten([xx])),"0"), result)])),op(Flatten([map(xx->cat(op(Flatten([xx])),"1"), result)]))]:
end if:
od:
end proc:


getbinary := proc(xx)
return sprintf("%08d", convert(StringTools:-Ord(xx), binary));
end proc:

forecastchars := proc(xx,level,maxlevel,prevlist)
local resultpos, ma, ma2, possiblelists, test1, test2, resultlists:
possiblelists := [""]:
resultlists := [""]:
if level > 0 then
resultpos := []:
for ma from 1 to length(xx)-1 do
test1 := map(xxx->filtersmallchar(xxx),forecastonechar(getbinary(xx[ma])));
test2 := map(xxx->filtersmallchar(xxx),forecastonechar(getbinary(xx[ma+1])));
possiblelists := MakeUnique(Flatten([test1, test2, prevlist]));
nops(possiblelists):
#print(map(xxx -> cat(cat(xx[ma],xx[ma+1]),xxx), possiblelists));
for ma2 from 1 to nops(possiblelists) do
#print("here1"):
#print("possiblelists",possiblelists):
#print("here1a"):
#print(map(xxx -> cat(cat(xx[ma],xx[ma+1]),xxx), forecastchars(cat(xx[ma+1],possiblelists[ma2]), level-1))):
#print("here2"):
if level = maxlevel then
resultlists := Flatten([[resultlists], [map(xxx -> cat(cat(xx[ma],xx[ma+1]),xxx), forecastchars(cat(xx[ma+1],possiblelists[ma2]), level-1, maxlevel, possiblelists))]]):
else
resultlists := Flatten([[resultlists], [map(xxx -> cat(xx[ma+1],xxx), forecastchars(cat(xx[ma+1],possiblelists[ma2]), level-1, maxlevel, possiblelists))]]):
end if:
od:
od:
end if:
return resultlists:
end proc:

forecastnumbers := proc(xx,level,maxlevel,prevlist)
local resultpos, ma, ma2, possiblelists, test1, test2, resultlists:
possiblelists := [""]:
resultlists := [""]:
if level > 0 then
resultpos := []:
for ma from 1 to length(xx)-1 do
test1 := map(xxx->filternumber(xxx),forecastonechar(getbinary(xx[ma])));
test2 := map(xxx->filternumber(xxx),forecastonechar(getbinary(xx[ma+1])));
possiblelists := MakeUnique(Flatten([test1, test2, prevlist]));
nops(possiblelists):
#print(map(xxx -> cat(cat(xx[ma],xx[ma+1]),xxx), possiblelists));
for ma2 from 1 to nops(possiblelists) do
#print("here1"):
#print("possiblelists",possiblelists):
#print("here1a"):
#print(map(xxx -> cat(cat(xx[ma],xx[ma+1]),xxx), forecastchars(cat(xx[ma+1],possiblelists[ma2]), level-1))):
#print("here2"):
if level = maxlevel then
resultlists := Flatten([[resultlists], [map(xxx -> cat(cat(xx[ma],xx[ma+1]),xxx), forecastnumbers(cat(xx[ma+1],possiblelists[ma2]), level-1, maxlevel, possiblelists))]]):
else
resultlists := Flatten([[resultlists], [map(xxx -> cat(xx[ma+1],xxx), forecastnumbers(cat(xx[ma+1],possiblelists[ma2]), level-1, maxlevel, possiblelists))]]):
end if:
od:
od:
end if:
return resultlists:
end proc:

filterlen := proc(xxx, len1)
if length(xxx) = len1 then
 return xxx:
end if:
end proc:

filtercorrectinteger := proc(xx)
if length(xx) > 2 then
if parse(substring(xx,3..4)) < 50 and parse(substring(xx,3..4)) > 0 then
 return parse(substring(xx,3..4)):
end if:
end if:
end proc:

indexoflist := proc(xx,found)
local ii:
for ii from 1 to nops(xx) do
 if xx[ii] = found then
  return ii:
 end if
od:
end proc:

filterresult := proc(xx,found)
if rhs(xx) = found then
 return lhs(xx):
end if:
end proc:

searchexistinhistory := proc(xx,possiblelistfromhistory)
local ii,localresult:
localresult := 0:
for ii from 1 to nops(possiblelistfromhistory) do
 if possiblelistfromhistory[ii] = xx then
  localresult := xx:
 end if:
od:
return localresult:
end proc:

searchgreaterthanzero := proc(xxx)
if xxx > 0 then
 return xxx:
end if:
end proc:

# actual practice
win1:=[9,16,22,38,40,46,
3,7,17,29,32,49,
10,14,23,29,40,42,
8,16,21,32,38,48,
6,13,23,25,44,48,
2,5,7,18,30,45,
14,15,16,25,27,30,
4,8,14,23,48,49,
5,14,31,32,36,46,
2,10,12,18,24,33,
2,14,30,32,36,45,
10,15,26,35,40,44,
2,8,14,25,43,44,
3,12,15,31,36,49,
1,2,4,13,43,48,
5,10,18,21,35,49,
5,12,16,23,29,39,
1,8,20,45,47,48,
9,12,14,20,27,36,
17,19,20,27,32,35,
5,21,25,27,38,40];
checkresult := Statistics:-Tally(win1);
for ii from 1 to 5 do
sol := map(xxx->filterresult(xxx,ii), checkresult);
print(ii,sol);
od:
previousnumbers :=  [9,16,22,38,40,46];
startingnumber := "11":
nops(checkresult);
whichrow := []:
realresult := forecastnumbers(startingnumber,3,3,[""]): #right 1
win1 := map(xxx->lhs(xxx), Statistics:-Tally(map(xxx->filtercorrectinteger(xxx),realresult)));
for ii from 1 to 5 do
sol := map(xxx->filterresult(xxx,ii), checkresult); # get row ii of numbers which has frequency ii
for jj from 1 to nops(win1) do
 if searchexistinhistory(win1[jj],sol) > 0 and not(searchexistinhistory(win1[jj],sol) in previousnumbers) then
  print("row",ii,"win1",jj,searchexistinhistory(win1[jj],sol));
  whichrow := [op(whichrow),searchexistinhistory(win1[jj],sol)]:
 end if: 
od:
od:

previousnumbers :=  [9,16,22,38,40,46];
startingnumber := "11":
nops(checkresult);
whichrow := []:
realresult := forecastnumbers(startingnumber,3,3,[""]): #right 1
win1 := map(xxx->lhs(xxx), Statistics:-Tally(map(xxx->filtercorrectinteger(xxx),realresult)));
for ii from 1 to 5 do
sol := map(xxx->filterresult(xxx,ii), checkresult); # get row ii of numbers which has frequency ii
for jj from 1 to nops(win1) do
 if searchexistinhistory(win1[jj],sol) > 0 and not(searchexistinhistory(win1[jj],sol) in previousnumbers) and (searchexistinhistory(win1[jj],sol) in check1[1+2] or searchexistinhistory(win1[jj],sol) in check1[1+4] or searchexistinhistory(win1[jj],sol) in check1[1+5] or searchexistinhistory(win1[jj],sol) in check1[1+6] or searchexistinhistory(win1[jj],sol) in check1[1+8]) then
  print("row",ii,"win1",jj,searchexistinhistory(win1[jj],sol));
  whichrow := [op(whichrow),searchexistinhistory(win1[jj],sol)]:
 end if: 
od:
od:

previousnumbers :=  [9,16,22,38,40,46];
startingnumber := "11":
nops(checkresult);
whichrow := []:
realresult := forecastnumbers(startingnumber,3,3,[""]): #right 1
win1 := map(xxx->lhs(xxx), Statistics:-Tally(map(xxx->filtercorrectinteger(xxx),realresult)));
for ii from 1 to 5 do
sol := map(xxx->filterresult(xxx,ii), checkresult); # get row ii of numbers which has frequency ii
for jj from 1 to nops(win1) do
 if searchexistinhistory(win1[jj],sol) > 0 and not(searchexistinhistory(win1[jj],sol) in previousnumbers) and (searchexistinhistory(win1[jj],sol) in check1[1+2] or searchexistinhistory(win1[jj],sol) in check1[1+4] or searchexistinhistory(win1[jj],sol) in check1[1+5] or searchexistinhistory(win1[jj],sol) in check1[1+6] or searchexistinhistory(win1[jj],sol) in check1[1+8]) then
  print("row",ii,"win1",jj,searchexistinhistory(win1[jj],sol));
  whichrow := [op(whichrow),searchexistinhistory(win1[jj],sol)]:
 end if: 
od:
od:

searchexistinhistory(win1[jj],sol) in check1[1+2]
searchexistinhistory(win1[jj],sol) in check1[1+4];
searchexistinhistory(win1[jj],sol) in check1[1+5];
searchexistinhistory(win1[jj],sol) in check1[1+6];
searchexistinhistory(win1[jj],sol) in check1[1+8];

spec
27
27
2
33
37
14
6
28
39
34

specgroup := [[12,16,19,23,28,32,
11,15,33,41,43,48,
17,24,38,44,46,47,
10,13,35,38,42,44,
2,5,13,37,42,44,
4,21,25,29,32,37,
10,12,20,22,25,33,
5,7,14,17,46,47,
10,19,25,32,33,37,
3,16,32,38,40,48,
4,8,13,19,44,48,
6,14,16,28,41,45,
2,17,23,35,42,48,
2,15,21,24,29,46,
4,6,15,28,30,33,
4,14,31,39,43,47,
10,19,24,28,31,34,
1,4,5,6,9,25,
2,11,16,19,44,47,
6,9,17,25,33,42,
3,7,21,22,38,47,
2,6,16,24,41,46,
5,13,31,33,34,35,
9,10,20,42,46,47,
7,8,12,24,30,49,
9,13,21,24,38,46,
22,37,41,42,44,45,
9,18,21,22,26,29,
2,3,16,42,43,45,
4,16,40,43,46,47,
14,18,30,40,43,46,
5,18,19,28,35,45,
5,14,16,22,26,28,
8,11,35,37,38,46,
7,12,24,25,39,44],[12,16,19,23,28,32,
11,15,33,41,43,48,
17,24,38,44,46,47,
10,13,35,38,42,44,
2,5,13,37,42,44,
4,21,25,29,32,37,
10,12,20,22,25,33,
5,7,14,17,46,47,
10,19,25,32,33,37,
3,16,32,38,40,48,
4,8,13,19,44,48,
6,14,16,28,41,45,
2,17,23,35,42,48,
2,15,21,24,29,46,
4,6,15,28,30,33,
4,14,31,39,43,47,
10,19,24,28,31,34,
1,4,5,6,9,25,
2,11,16,19,44,47,
6,9,17,25,33,42,
3,7,21,22,38,47,
2,6,16,24,41,46,
5,13,31,33,34,35,
9,10,20,42,46,47,
7,8,12,24,30,49,
9,13,21,24,38,46,
22,37,41,42,44,45,
9,18,21,22,26,29,
2,3,16,42,43,45,
4,16,40,43,46,47,
14,18,30,40,43,46,
5,18,19,28,35,45,
5,14,16,22,26,28,
8,11,35,37,38,46,
7,12,24,25,39,44],[1,20,22,27,31,41,
8,12,20,25,37,46,
8,11,13,30,34,49,
3,23,33,36,41,49,
18,28,30,33,34,36,
18,27,28,34,35,45,
6,15,16,18,37,43,
9,16,28,36,42,45,
5,17,22,34,38,48,
9,17,26,36,40,48,
11,18,20,24,29,49,
8,9,24,35,39,41,
9,27,28,32,34,43,
15,18,24,28,34,42,
1,3,11,21,41,42,
9,11,33,43,46,48,
26,29,31,37,43,49,
6,10,17,20,25,28,
4,12,26,44,47,48,
13,18,29,31,32,46,
14,15,21,22,32,40,
7,13,15,20,21,41,
8,9,17,31,37,38,
18,19,26,34,39,46,
4,24,26,30,31,46,
5,7,18,26,29,47,
3,7,11,18,20,27,
14,15,19,23,24,25,
1,18,24,29,35,46,
15,18,25,27,38,47],[5,8,14,22,31,48,
8,27,28,37,38,49,
26,27,28,36,42,47,
8,9,12,15,17,28,
1,2,3,4,7,10,
5,18,26,28,30,45,
2,3,15,28,46,48,
1,2,5,7,16,45,
16,18,27,35,42,44,
9,19,28,29,38,40,
1,4,12,14,35,47,
6,8,10,21,25,29,
1,4,13,27,47,49,
16,23,29,30,37,38,
3,19,29,36,47,49,
1,5,8,17,20,37,
9,15,16,17,18,37,
6,21,29,39,40,47,
3,6,10,14,15,20,
1,10,29,40,44,49,
3,17,23,26,41,47,
4,7,9,20,37,49,
4,8,24,26,37,41,
7,12,30,34,40,48,
19,21,30,35,36,37,
1,15,23,24,31,39,
2,17,34,38,46,49],[16,17,21,42,48,49,
7,14,26,31,38,44,
3,17,38,39,46,49,
13,15,30,36,44,49,
9,20,30,33,38,39,
1,4,9,17,35,41,
10,12,19,25,42,46,
2,5,17,22,27,28,
12,16,31,34,42,48,
6,8,12,16,32,49,
17,18,28,32,33,48,
1,9,15,31,33,41,
11,13,15,39,48,49,
1,7,22,28,29,49,
7,8,26,31,35,39,
3,8,12,18,22,33,
4,7,12,15,27,34,
1,4,5,22,44,46,
10,21,26,34,35,43,
9,14,19,20,43,47,
11,13,18,29,44,46,
1,5,15,22,43,47,
9,16,22,28,30,32,
1,15,30,39,45,49,
9,15,21,31,33,41,
4,10,20,25,33,36,
2,20,29,38,39,43,
1,7,9,10,36,44,
3,18,34,41,45,46,
2,8,12,13,27,35,
12,15,22,26,27,29,
5,13,22,29,34,42,
1,15,16,28,29,47,
5,9,19,21,27,46],[1,21,22,45,46,49,
7,8,12,17,22,29,
5,30,38,43,44,47,
3,4,5,26,45,48,
23,25,35,39,42,43,
3,4,16,30,34,39,
8,17,28,34,39,40,
10,11,31,34,37,38,
1,5,11,23,34,47,
2,17,23,30,34,41,
16,21,27,37,40,43,
5,7,8,18,24,29,
4,5,21,31,36,38,
2,8,15,26,37,45,
1,3,12,29,36,41,
1,9,18,25,37,48,
2,23,24,29,33,35,
20,21,35,37,47,48,
7,9,12,40,42,44,
2,15,19,34,42,45,
1,3,4,26,34,37,
1,5,28,31,44,46,
12,18,23,24,46,49,
6,9,29,31,42,47,
7,10,11,17,22,30,
13,15,17,18,41,45,
10,13,20,24,29,36,
4,22,33,39,42,47,
4,9,23,37,47,48,
12,13,18,20,28,48,
3,6,9,29,30,33,
5,11,15,42,45,48,
4,7,12,20,39,48,
1,5,13,16,24,41,
9,27,33,38,39,40,
1,6,9,10,20,46,
12,15,17,24,36,49,
2,3,7,9,16,34,
4,21,22,29,41,45,
1,7,15,23,29,35,
1,8,9,32,35,37,
2,6,7,15,20,38,
5,8,36,39,42,46],[1,9,11,23,29,34,
18,25,27,30,40,43,
7,8,21,22,34,46,
8,10,16,30,39,40,
4,5,18,23,32,44,
3,7,14,21,25,29,
30,31,35,40,42,48,
17,18,20,26,31,32,
21,36,41,42,46,49,
15,18,24,27,39,49,
10,11,25,33,40,46,
10,16,33,34,44,47,
11,24,31,45,46,47,
22,28,35,36,44,45,
5,20,37,38,43,48,
4,21,25,45,47,49,
7,10,17,18,28,30,
12,24,27,45,47,49,
7,20,23,29,35,41,
13,17,26,28,32,34,
4,19,31,34,37,44,
8,15,18,37,39,44,
4,11,16,26,42,47,
4,28,31,34,48,49,
8,10,19,27,39,44,
9,15,24,46,48,49,
10,14,26,29,39,41,
7,16,17,21,27,36,
3,4,7,22,30,39,
5,16,19,26,42,44,
11,13,16,18,21,22,
8,12,15,26,39,44,
16,20,23,27,41,46,
7,15,25,34,35,38,
9,10,12,13,41,48,
22,23,24,28,29,43],[4,10,11,18,29,38,
3,5,6,11,34,42,
9,21,29,33,35,48,
9,12,13,22,30,31,
3,5,20,30,33,38,
8,9,10,22,33,40,
1,3,5,20,35,39,
3,22,23,26,42,48,
2,20,40,42,47,48,
15,18,22,24,42,44,
9,18,24,34,40,43,
8,20,26,36,44,47,
8,17,23,40,41,43,
1,3,10,15,17,40,
2,13,16,34,37,47,
2,5,8,13,17,35,
1,8,18,20,22,46,
12,14,23,32,37,39,
2,6,21,45,46,49,
18,21,34,37,40,49,
3,9,15,32,43,46,
21,31,33,35,39,44,
1,8,25,33,34,41,
8,10,21,22,30,47,
2,5,8,22,29,41],[1,4,5,29,33,44,
5,14,20,21,36,49,
5,28,32,34,37,48,
5,10,18,24,27,49,
1,6,19,26,28,41,
18,20,24,36,44,45,
13,20,23,24,46,47,
8,15,31,35,42,44,
2,12,14,23,40,46,
26,27,32,33,37,45,
12,13,18,41,43,49,
23,25,34,40,42,46,
9,22,23,31,45,47,
2,3,25,28,35,43,
17,25,32,33,46,48,
15,26,27,38,42,43,
9,14,17,34,40,48,
14,16,38,44,48,49,
5,11,12,15,24,32,
1,4,6,13,15,48,
3,7,20,34,36,41,
1,8,20,25,38,43,
5,13,23,33,37,40,
3,13,18,20,22,30,
16,24,31,35,37,49,
1,34,36,37,42,46,
13,15,19,22,33,38],[4,10,25,26,38,49,
6,13,31,42,43,45,
5,11,13,19,33,48,
9,10,23,28,37,46,
1,11,13,23,35,36,
6,11,16,29,30,37,
14,17,23,24,25,37,
11,16,19,21,38,46,
33,39,40,43,48,49,
3,6,7,9,11,28,
3,17,20,26,33,47,
4,14,24,30,43,48,
1,4,13,22,39,42,
5,18,19,32,40,44,
8,14,21,41,45,48,
2,5,8,29,40,47,
3,23,32,35,43,49,
10,23,33,39,42,48,
3,14,21,25,27,42,
5,6,11,25,45,48,
11,21,30,36,42,47,
6,11,17,31,40,41,
5,8,31,46,47,49,
6,17,29,33,42,48,
11,14,16,17,35,49,
5,8,17,24,30,42,
8,11,15,20,33,43,
2,6,10,17,18,46,
11,26,27,39,40,47,
2,8,12,20,25,49]]:

for mm from 1 to 10 do
previousnumbers :=  check1[mm+2];
startingnumber := convert(specialnumbers[mm+3],string):
checkresult := Statistics:-Tally(specgroup[mm]);
nops(checkresult);
whichrow := []:
realresult := forecastnumbers(startingnumber,3,3,[""]): #right 1
win1 := map(xxx->lhs(xxx), Statistics:-Tally(map(xxx->filtercorrectinteger(xxx),realresult)));
for ii from 1 to 5 do
sol := map(xxx->filterresult(xxx,ii), checkresult); # get row ii of numbers which has frequency ii
for jj from 1 to nops(specgroup[mm]) do
 #if searchexistinhistory(specgroup[mm][jj],sol) > 0 and not(searchexistinhistory(specgroup[mm][jj],sol) in previousnumbers) and (searchexistinhistory(specgroup[mm][jj],sol) in check1[mm+1+2] or searchexistinhistory(specgroup[mm][jj],sol) in check1[mm+1+4] or searchexistinhistory(specgroup[mm][jj],sol) in check1[mm+1+5] or searchexistinhistory(specgroup[mm][jj],sol) in check1[mm+1+6] or searchexistinhistory(specgroup[mm][jj],sol) in check1[mm+1+8]) then
 if searchexistinhistory(specgroup[mm][jj],sol) > 0 and not(searchexistinhistory(specgroup[mm][jj],sol) in previousnumbers) then
  #print("row",ii,"win1",jj,searchexistinhistory(specgroup[mm][jj],sol));
  whichrow := [op(whichrow),searchexistinhistory(specgroup[mm][jj],sol)]:
 end if: 
od:
od:
print("***"):
whichrow := MakeUnique(whichrow):
numberofma := 0:
for ii from 1 to nops(whichrow) do
 if whichrow[ii] in check1[mm+1] then
  numberofma := numberofma + 1:
 end if:
od:
print("wonderful=", numberofma, whichrow, check1[mm+1]):
od:

specialnumbers :=[11,
12,
27,
27,
2,
33,
37,
14,
6,
28,
39,
34,
38,
19,
40,
26,
23,
7,
44,
16,
16,
2,
8,
4,
48,
15,
26,
42,
45,
34,
7,
8,
10,
20,
45,
7,
26,
15,
40,
24,
26,
45,
42,
10,
20,
33,
18,
33,
35,
6,
12,
19,
39,
18,
33,
26,
41,
47,
39,
29,
23,
37,
45,
29,
11,
7,
16,
25,
33,
41,
5,
32,
33,
26,
42,
37,
28,
48,
47,
8,
42,
41,
14,
35,
19,
12,
10,
46,
13,
9,
34,
30,
6,
40,
27,
42,
14,
25,
26]:

accumlist := []:
for ii from 1 to 5 do
for jj from 1 to nops(whichrow) do #every number in each row
 currentlist3 := getpossiblelist(PAB[whichrow[jj]], 2, 3):
 accumlist := [op(accumlist), currentlist3]:
od:
od:
magic := Statistics:-Tally(Flatten(accumlist));
for ii from 1 to nops(magic) do
 if rhs(magic[ii]) >= 20 and lhs(magic[ii]) in whichrow then
  print(lhs(magic[ii]));
 end if:
od:

#sixth number
for ii from 1 to nops(magic) do
 if rhs(magic[ii]) = 30 and not(lhs(magic[ii]) in previousnumbers) and lhs(magic[ii]) in getpossiblelist(PAB[11], 2, 3) and lhs(magic[ii]) in [4,17,21,32,36,46,27] then
  print(lhs(magic[ii]));
 end if:
od:


realresult := forecastnumbers("12",3,3,[""]): #right 1
win1 := map(xxx->lhs(xxx), Statistics:-Tally(map(xxx->filtercorrectinteger(xxx),realresult)));
list1 := win1:
nops(win1);


print("whichrow is already used ", whichrow):

startingnumber := "39":
for ii from 1 to 5 do
sol := map(xxx->filterresult(xxx,ii), checkresult);
realresult := forecastnumbers(startingnumber,3,3,[""]): #right 1
win1 := map(xxx->lhs(xxx), Statistics:-Tally(map(xxx->filtercorrectinteger(xxx),realresult)));
for jj from 1 to nops(win1) do
 if searchexistinhistory(win1[jj],sol) > 0 and not(ii in whichrow) and not(searchexistinhistory(win1[jj],sol) in previousnumbers) then
  print("row",ii,"win1",jj,searchexistinhistory(win1[jj],sol));
 end if: 
od:
od:

for ii from 1 to 5 do
sol := map(xxx->filterresult(xxx,ii), checkresult);
print(ii,sol);
od:

startingnumber := "21":
for ii from 1 to 5 do
sol := map(xxx->filterresult(xxx,ii), checkresult);
realresult := forecastnumbers(startingnumber,3,3,[""]): #right 1
win1 := map(xxx->lhs(xxx), Statistics:-Tally(map(xxx->filtercorrectinteger(xxx),realresult)));
for jj from 1 to nops(win1) do
 if searchexistinhistory(win1[jj],sol) > 0 and not(ii in whichrow) and not(searchexistinhistory(win1[jj],sol) in previousnumbers) then
  print("row",ii,"win1",jj,searchexistinhistory(win1[jj],sol));
 end if: 
od:
od:

Conjecture if input any one in print result, will also output the same previous result


previous example:

realresult := forecastnumbers("27",3,3,[""]): #right 1
win1 := map(xxx->lhs(xxx), Statistics:-Tally(map(xxx->filtercorrectinteger(xxx),realresult)));
list1 := win1:
nops(win1);

#check conjecture 1
check1 := [[9,16,22,38,40,46],
[6,22,23,31,36,45],
[1,3,9,13,34,35],
[4,17,21,32,36,46],
[1,20,22,27,31,41],
[5,8,14,22,31,48],
[16,17,21,42,48,49],
[1,21,22,45,46,49],
[1,9,11,23,29,34],
[4,10,11,18,29,38],
[1,4,5,29,33,44],
[4,10,25,26,38,49],
[14,17,22,29,30,31],
[2,11,14,20,27,30],
[4,21,24,39,45,46],
[3,9,19,33,40,41],
[7,17,20,34,36,44],
[18,19,21,30,38,48],
[2,9,21,35,36,40],
[9,10,23,30,38,48],
[5,14,17,33,41,47],
[8,12,20,25,37,46],
[2,13,17,23,30,46],
[1,2,11,19,40,48],
[2,32,33,35,36,44],
[1,4,20,27,32,39],
[17,19,25,35,41,44],
[2,14,18,19,40,43],
[10,18,22,23,29,32],
[6,13,31,42,43,45],
[15,20,24,34,42,44],
[4,12,19,20,25,26],
[13,15,16,32,34,46],
[1,7,13,29,32,44],
[5,8,12,17,20,37],
[5,8,23,34,41,44],
[14,16,21,28,43,46],
[7,21,26,30,38,47],
[3,12,13,19,24,45],
[6,11,22,25,32,33],
[7,14,25,28,33,40],
[13,14,18,23,29,35],
[8,15,25,30,34,40],
[13,24,28,29,31,44],
[2,5,23,27,36,43],
[8,27,28,37,38,49],
[1,2,13,23,35,43],
[26,27,28,36,42,47],
[1,6,22,37,44,48],
[18,25,27,30,40,43],
[2,7,14,26,38,39],
[7,10,14,29,45,46],
[5,14,20,21,36,49],
[4,11,22,29,37,46],
[8,9,12,15,17,28],
[2,11,13,15,17,21],
[3,4,10,26,37,43],
[4,14,16,25,32,35],
[5,28,32,34,37,48],
[3,10,21,26,28,38],
[15,19,20,32,33,34],
[7,14,26,31,38,44],
[7,22,32,33,34,39],
[9,24,26,28,37,39],
[3,7,17,29,32,49],
[8,13,23,30,47,48],
[9,15,18,21,24,37],
[4,11,18,22,24,49],
[1,2,3,4,7,10],
[3,9,24,31,38,49],
[12,13,16,18,38,40],
[2,6,23,24,37,42],
[5,18,26,28,30,45],
[10,15,17,18,27,40],
[2,16,27,29,34,41],
[3,17,38,39,46,49],
[3,5,6,11,34,42],
[9,12,31,39,42,46],
[6,14,18,22,30,38],
[1,2,21,31,33,36],
[22,26,32,38,43,47],
[8,16,17,34,35,44],
[7,8,12,17,22,29],
[3,12,13,20,33,43],
[2,4,7,15,28,45],
[8,27,28,30,38,41],
[7,12,18,27,28,40],
[2,9,16,27,32,40],
[16,19,24,28,36,42],
[12,26,28,36,45,49],
[5,11,13,19,33,48],
[2,6,10,28,38,40],
[7,8,21,22,34,46],
[14,20,28,33,41,48],
[12,16,19,23,28,32],
[1,17,20,34,43,44],
[5,30,38,43,44,47],
[4,16,19,27,41,44],
[3,18,21,25,31,42],
[24,25,34,35,44,49],
[1,13,19,21,38,49],
[7,16,32,37,38,46],
[3,4,5,26,45,48],
[11,15,33,41,43,48],
[8,25,26,28,38,43],
[8,11,13,30,34,49],
[14,20,21,31,34,42],
[3,6,13,24,37,43],
[4,20,34,35,40,47],
[14,16,24,25,43,44],
[2,3,15,28,46,48],
[3,17,20,22,45,46],
[5,12,14,20,27,46],
[3,4,11,23,44,47],
[10,11,19,23,30,38],
[5,9,13,22,34,39],
[2,17,23,32,36,40],
[10,16,34,41,45,47],
[7,11,12,19,21,39],
[9,21,29,33,35,48],
[12,20,24,35,39,47],
[3,14,17,21,28,49],
[11,18,26,31,39,44],
[10,11,22,41,44,46],
[7,21,27,33,46,47],
[1,2,7,16,24,34],
[16,21,30,36,38,47],
[12,20,31,32,35,45],
[7,19,20,28,30,31],
[13,14,21,31,38,44],
[1,6,13,17,34,44],
[2,8,16,32,33,37],
[2,5,6,7,16,29],
[7,13,23,30,32,48],
[10,15,22,38,42,43],
[6,9,21,35,48,49],
[9,10,20,21,38,39],
[4,5,8,12,34,37],
[19,22,27,29,45,48],
[13,15,30,36,44,49],
[10,14,23,29,40,42],
[4,13,34,36,42,48],
[2,5,8,12,20,49],
[8,16,21,32,38,48],
[3,4,19,24,26,34],
[21,24,36,38,39,44],
[21,23,32,33,36,42],
[9,15,36,38,46,48],
[14,18,33,34,35,46],
[6,13,23,25,44,48],
[2,8,20,24,37,39],
[1,19,23,24,32,40],
[2,11,25,28,36,46],
[4,12,19,20,27,49],
[20,26,28,32,40,45],
[6,7,12,15,27,36],
[11,20,28,29,44,49],
[1,3,25,27,28,45],
[2,10,16,35,46,47],
[3,5,14,15,39,41],
[5,8,30,34,45,48],
[16,24,28,35,45,46],
[14,21,25,27,44,46],
[21,25,28,33,46,48],
[3,6,13,38,43,44],
[8,21,25,32,34,45],
[4,10,21,30,35,43],
[4,6,29,34,36,45],
[9,12,13,22,30,31],
[17,24,38,44,46,47],
[16,18,21,25,35,46],
[5,10,18,24,27,49],
[23,25,35,39,42,43],
[3,8,15,16,17,38],
[1,6,19,26,28,41],
[3,23,33,36,41,49],
[9,14,24,30,33,48],
[3,4,16,30,34,39],
[17,26,29,32,48,49],
[1,2,5,7,16,45],
[11,16,19,21,30,33],
[6,9,11,20,27,44],
[3,6,22,24,45,47],
[9,15,24,27,44,45],
[12,20,39,44,47,49],
[13,20,38,39,41,45],
[18,21,22,34,42,43],
[8,14,24,29,36,43],
[3,4,17,30,35,47],
[11,13,15,19,21,29],
[7,13,15,35,38,45],
[18,28,30,33,34,36],
[1,5,29,32,39,44],
[8,20,30,34,42,48],
[5,9,22,26,27,40],
[7,8,12,14,23,32],
[2,12,33,40,45,47],
[8,18,20,25,30,39],
[1,2,6,37,40,43],
[1,2,10,23,32,49],
[8,13,15,35,44,45],
[4,8,15,18,30,45],
[6,9,11,29,43,47],
[2,5,7,18,30,45],
[6,8,11,32,34,41],
[2,11,12,22,24,25],
[3,5,20,30,33,38],
[1,8,33,37,42,47],
[12,18,20,28,33,47],
[11,28,36,38,44,48],
[6,11,16,20,43,45],
[18,20,24,36,44,45],
[18,22,40,41,48,49],
[16,18,27,35,42,44],
[9,24,29,32,34,47],
[9,10,25,40,48,49],
[6,16,19,34,35,46],
[4,11,14,41,42,44],
[8,9,10,22,33,40],
[15,21,24,25,28,31],
[10,17,25,26,39,44],
[17,21,22,36,41,44],
[9,20,30,33,38,39],
[13,15,25,40,41,48],
[12,13,31,33,35,47],
[13,15,24,28,41,45],
[10,20,24,28,33,45],
[4,14,28,42,43,47],
[6,16,27,34,44,48],
[5,10,11,25,27,44],
[7,12,13,25,34,38],
[4,10,28,37,42,48],
[4,5,6,22,31,46],
[20,22,31,33,39,44],
[18,27,28,34,35,45],
[1,14,16,25,40,48],
[7,11,15,38,39,46],
[2,12,19,33,34,48],
[17,18,26,30,33,34],
[1,4,22,30,33,34],
[4,21,22,35,36,46],
[8,17,28,34,39,40],
[2,7,9,22,32,46],
[8,10,16,30,39,40],
[9,10,23,28,37,46],
[6,15,16,18,37,43],
[4,10,15,16,24,28],
[2,11,12,25,36,43],
[1,4,9,17,35,41],
[3,5,17,22,25,27],
[5,13,21,25,38,40],
[1,11,13,23,35,36],
[1,4,13,22,32,41],
[15,16,20,26,36,40],
[12,16,34,36,42,45],
[5,6,8,10,31,36],
[9,22,28,32,37,39],
[9,13,29,30,39,45],
[3,15,16,39,41,42],
[2,26,31,32,36,37],
[4,5,18,23,32,44],
[7,17,34,41,43,49],
[2,6,13,25,30,33],
[1,4,8,21,22,24],
[22,26,27,28,36,47],
[10,12,19,25,42,46],
[22,23,35,40,41,42],
[5,9,13,15,21,23],
[14,20,28,31,32,47],
[4,5,11,17,24,48],
[12,25,32,33,34,35],
[4,11,15,26,28,30],
[10,33,40,43,45,49],
[4,14,15,19,41,42],
[13,20,23,24,46,47],
[16,18,22,23,35,38],
[7,8,10,13,20,38],
[2,5,17,22,27,28],
[9,19,28,29,38,40],
[9,24,32,34,43,47],
[4,11,23,32,44,48],
[12,14,21,27,38,43],
[8,9,18,33,41,43],
[1,5,26,28,40,49],
[3,10,26,33,42,46],
[12,16,31,34,42,48],
[4,11,12,24,35,46],
[13,16,24,26,40,44],
[10,12,24,25,26,33],
[10,13,35,38,42,44],
[7,12,16,17,20,25],
[9,11,14,22,27,49],
[18,24,28,31,39,49],
[11,12,15,21,38,42],
[9,16,28,36,42,45],
[2,7,20,23,44,47],
[7,10,15,37,42,45],
[5,10,13,43,44,45],
[16,18,19,36,42,47]]:

check1[1+2];
check1[1+4];
check1[1+5];
check1[1+6];
check1[1+8];


prev3numbers := 0:
totolnumebrs := 0:
for ii from 1 to nops(check1) do
 found := 0:
 for jj from 1 to nops(check1[ii]) do
  if check1[ii][jj] in check1[ii+3] and found = 0 then
   found := 1:
  end if:
 od:
 if found = 1 then
  print("yes", ii, check[ii]):
  prev3numbers := prev3numbers + 1:
 else
  print("no", ii, check[ii]):
 end if:
 totolnumebrs := totolnumebrs + 1:
od:
evalf(prev3numbers/totolnumebrs);
0.5371621622

prev3numbers := 0:
totolnumebrs := 0:
for ii from 1 to nops(check1) do
 found := 0:
 for jj from 1 to nops(check1[ii]) do
  if check1[ii][jj] in check1[ii+2] and found = 0 then
   found := 1:
  end if:
 od:
 if found = 1 then
  print("yes", ii, check[ii]):
  prev3numbers := prev3numbers + 1:
 else
  print("no", ii, check[ii]):
 end if:
 totolnumebrs := totolnumebrs + 1:
od:
evalf(prev3numbers/totolnumebrs);
0.555555555

prev3numbers := 0:
totolnumebrs := 0:
for ii from 1 to nops(check1) do
 found := 0:
 for jj from 1 to nops(check1[ii]) do
  if check1[ii][jj] in check1[ii+1] and found = 0 then
   found := 1:
  end if:
 od:
 if found = 1 then
  print("yes", ii, check[ii]):
  prev3numbers := prev3numbers + 1:
 else
  print("no", ii, check[ii]):
 end if:
 totolnumebrs := totolnumebrs + 1:
od:
evalf(prev3numbers/totolnumebrs);
0.526845637

prev3numbers := 0:
totolnumebrs := 0:
for ii from 1 to nops(check1) do
 found := 0:
 for jj from 1 to nops(check1[ii]) do
  if check1[ii][jj] in check1[ii+4] and found = 0 then
   found := 1:
  end if:
 od:
 if found = 1 then
  print("yes", ii, check[ii]):
  prev3numbers := prev3numbers + 1:
 else
  print("no", ii, check[ii]):
 end if:
 totolnumebrs := totolnumebrs + 1:
od:
evalf(prev3numbers/totolnumebrs);
0.5525423729

prev3numbers := 0:
totolnumebrs := 0:
for ii from 1 to nops(check1) do
 found := 0:
 for jj from 1 to nops(check1[ii]) do
  if check1[ii][jj] in check1[ii+5] and found = 0 then
   found := 1:
  end if:
 od:
 if found = 1 then
  print("yes", ii, check[ii]):
  prev3numbers := prev3numbers + 1:
 else
  print("no", ii, check[ii]):
 end if:
 totolnumebrs := totolnumebrs + 1:
od:
evalf(prev3numbers/totolnumebrs);

prev3numbers := 0:
totolnumebrs := 0:
for ii from 1 to nops(check1) do
 found := 0:
 for jj from 1 to nops(check1[ii]) do
  if check1[ii][jj] in check1[ii+6] and found = 0 then
   found := 1:
  end if:
 od:
 if found = 1 then
  print("yes", ii, check[ii]):
  prev3numbers := prev3numbers + 1:
 else
  print("no", ii, check[ii]):
 end if:
 totolnumebrs := totolnumebrs + 1:
od:
evalf(prev3numbers/totolnumebrs);
0.5563139932

prev3numbers := 0:
totolnumebrs := 0:
for ii from 1 to nops(check1) do
 found := 0:
 for jj from 1 to nops(check1[ii]) do
  if check1[ii][jj] in check1[ii+8] and found = 0 then
   found := 1:
  end if:
 od:
 if found = 1 then
  print("yes", ii, check[ii]):
  prev3numbers := prev3numbers + 1:
 else
  print("no", ii, check[ii]):
 end if:
 totolnumebrs := totolnumebrs + 1:
od:
evalf(prev3numbers/totolnumebrs);
0.5945017182

prev3numbers := 0:
totolnumebrs := 0:
for ii from 1 to nops(check1) do
 found := 0:
 for jj from 1 to nops(check1[ii]) do
  if check1[ii][jj] in check1[ii+9] and found = 0 then
   found := 1:
  end if:
 od:
 if found = 1 then
  print("yes", ii, check[ii]):
  prev3numbers := prev3numbers + 1:
 else
  print("no", ii, check[ii]):
 end if:
 totolnumebrs := totolnumebrs + 1:
od:
evalf(prev3numbers/totolnumebrs);
0.5034482759

#real example
win1:=[1,3,9,13,34,35,
4,17,21,32,36,46,
12,16,19,23,28,32,
11,15,33,41,43,48,
17,24,38,44,46,47,
10,13,35,38,42,44,
2,5,13,37,42,44,
4,21,25,29,32,37,
10,12,20,22,25,33,
5,7,14,17,46,47,
10,19,25,32,33,37,
3,16,32,38,40,48,
4,8,13,19,44,48,
6,14,16,28,41,45,
2,17,23,35,42,48,
2,15,21,24,29,46,
4,6,15,28,30,33,
4,14,31,39,43,47,
10,19,24,28,31,34,
1,4,5,6,9,25,
2,11,16,19,44,47,
6,9,17,25,33,42,
3,7,21,22,38,47,
2,6,16,24,41,46,
5,13,31,33,34,35,
9,10,20,42,46,47,
7,8,12,24,30,49,
9,13,21,24,38,46,
22,37,41,42,44,45,
9,18,21,22,26,29,
2,3,16,42,43,45,
4,16,40,43,46,47,
14,18,30,40,43,46,
5,18,19,28,35,45,
5,14,16,22,26,28,
8,11,35,37,38,46,
7,12,24,25,39,44,];

checkresult := Statistics:-Tally(win1);
previousnumbers :=  [1,3,9,13,34,35,27];

startingnumber := "27":
whichrow := []:
for ii from 1 to 5 do
sol := map(xxx->filterresult(xxx,ii), checkresult);
realresult := forecastnumbers(startingnumber,3,3,[""]): #right 1
win1 := map(xxx->lhs(xxx), Statistics:-Tally(map(xxx->filtercorrectinteger(xxx),realresult)));
for jj from 1 to nops(win1) do
 if searchexistinhistory(win1[jj],sol) > 0 and not(searchexistinhistory(win1[jj],sol) in previousnumbers) then
  print("row",ii,"win1",jj,searchexistinhistory(win1[jj],sol));
  whichrow := [op(whichrow),searchexistinhistory(win1[jj],sol)]:
 end if: 
od:
od:

whichrow;
getpossiblelist(PAB[whichrow[1]], 2, 3);
getpossiblelist(PAB[whichrow[2]], 2, 3);
getpossiblelist(PAB[whichrow[3]], 2, 3);
getpossiblelist(PAB[whichrow[4]], 2, 3);
getpossiblelist(PAB[whichrow[5]], 2, 3);
getpossiblelist(PAB[whichrow[6]], 2, 3);
getpossiblelist(PAB[whichrow[7]], 2, 3);

accumlist := []:
for ii from 1 to 5 do
for jj from 1 to nops(whichrow) do #every number in each row
 currentlist3 := getpossiblelist(PAB[whichrow[jj]], 2, 3):
 accumlist := [op(accumlist), currentlist3]:
od:
od:
magic := Statistics:-Tally(Flatten(accumlist));
for ii from 1 to nops(magic) do
 if rhs(magic[ii]) >= 20 and lhs(magic[ii]) in whichrow then
  print(lhs(magic[ii]));
 end if:
od:

AA1 := getpossiblelist(PAB[43], 2, 3);
AA2 := getpossiblelist(PAB[32], 2, 3);
AA3 := getpossiblelist(PAB[37], 2, 3);

BB1 := interseclist(AA1,AA2);
BB2 := interseclist(AA2,AA3);
BB3 := interseclist(AA1,AA3);

#sixth number
for ii from 1 to nops(magic) do
 if rhs(magic[ii]) = 20 and not(lhs(magic[ii]) in previousnumbers) and lhs(magic[ii]) in getpossiblelist(PAB[27], 2, 3) and lhs(magic[ii]) in [1,20,22,27,31,41,2] then
  print(lhs(magic[ii]));
 end if:
od:




getpossiblelist := proc(xx, range1, range2) #usage: PAB[1]
local ii, plist:
plist := []:
for ii from 1 to op(1,xx) do
 if xx[ii] >= range1 and xx[ii] <= range2 then
  plist := [op(plist), ii];
 end if:
od:
return plist:
end proc:

winlist := []:
accumlist := []:
for ii from 1 to 5 do
sol := map(xxx->filterresult(xxx,ii), checkresult);
for jj from 1 to nops(sol) do #every number in each row
 currentlist3 := getpossiblelist(PAB[sol[jj]], 2, 3):
 accumlist := [op(accumlist), currentlist3]:
od:
od:

interseclist := proc(param1, param2)
return [op({op(param1)} intersect {op(param2)})];
end proc:
prevlist := []:
for ii from 2 to nops(accumlist) do
 ilist := interseclist(accumlist[ii-1], accumlist[ii]);
 prevlist := [op(prevlist), ilist]:
od:
magic := Statistics:-Tally(Flatten(prevlist));
for ii from 1 to nops(magic) do
 if rhs(magic[ii]) >= 10 then
  print(lhs(magic[ii]));
 end if:
od:


choose 3 numbers in row 3
choose 1 number in row 4



#correlation

correlationlist := [[9,16,22,38,40,46,11],
[6,22,23,31,36,45,12],
[1,3,9,13,34,35,27],
[4,17,21,32,36,46,27],
[1,20,22,27,31,41,2],
[5,8,14,22,31,48,33],
[16,17,21,42,48,49,37],
[1,21,22,45,46,49,14],
[1,9,11,23,29,34,6],
[4,10,11,18,29,38,28],
[1,4,5,29,33,44,39],
[4,10,25,26,38,49,34],
[14,17,22,29,30,31,38],
[2,11,14,20,27,30,19],
[4,21,24,39,45,46,40],
[3,9,19,33,40,41,26],
[7,17,20,34,36,44,23],
[18,19,21,30,38,48,7],
[2,9,21,35,36,40,44],
[9,10,23,30,38,48,16],
[5,14,17,33,41,47,16],
[8,12,20,25,37,46,2],
[2,13,17,23,30,46,8],
[1,2,11,19,40,48,4],
[2,32,33,35,36,44,48],
[1,4,20,27,32,39,15],
[17,19,25,35,41,44,26],
[2,14,18,19,40,43,42],
[10,18,22,23,29,32,45],
[6,13,31,42,43,45,34],
[15,20,24,34,42,44,7],
[4,12,19,20,25,26,8],
[13,15,16,32,34,46,10],
[1,7,13,29,32,44,20],
[5,8,12,17,20,37,45],
[5,8,23,34,41,44,7],
[14,16,21,28,43,46,26],
[7,21,26,30,38,47,15],
[3,12,13,19,24,45,40],
[6,11,22,25,32,33,24],
[7,14,25,28,33,40,26],
[13,14,18,23,29,35,45],
[8,15,25,30,34,40,42],
[13,24,28,29,31,44,10],
[2,5,23,27,36,43,20],
[8,27,28,37,38,49,33],
[1,2,13,23,35,43,18],
[26,27,28,36,42,47,33],
[1,6,22,37,44,48,35],
[18,25,27,30,40,43,6],
[2,7,14,26,38,39,12],
[7,10,14,29,45,46,19],
[5,14,20,21,36,49,39],
[4,11,22,29,37,46,18],
[8,9,12,15,17,28,33],
[2,11,13,15,17,21,26],
[3,4,10,26,37,43,41],
[4,14,16,25,32,35,47],
[5,28,32,34,37,48,39],
[3,10,21,26,28,38,29],
[15,19,20,32,33,34,23],
[7,14,26,31,38,44,37],
[7,22,32,33,34,39,45],
[9,24,26,28,37,39,29],
[3,7,17,29,32,49,11],
[8,13,23,30,47,48,7],
[9,15,18,21,24,37,16],
[4,11,18,22,24,49,25],
[1,2,3,4,7,10,33],
[3,9,24,31,38,49,41],
[12,13,16,18,38,40,5],
[2,6,23,24,37,42,32],
[5,18,26,28,30,45,33],
[10,15,17,18,27,40,26],
[2,16,27,29,34,41,42],
[3,17,38,39,46,49,37],
[3,5,6,11,34,42,28],
[9,12,31,39,42,46,48],
[6,14,18,22,30,38,47],
[1,2,21,31,33,36,8],
[22,26,32,38,43,47,42],
[8,16,17,34,35,44,41],
[7,8,12,17,22,29,14],
[3,12,13,20,33,43,35],
[2,4,7,15,28,45,19],
[8,27,28,30,38,41,12],
[7,12,18,27,28,40,10],
[2,9,16,27,32,40,46],
[16,19,24,28,36,42,13],
[12,26,28,36,45,49,9],
[5,11,13,19,33,48,34],
[2,6,10,28,38,40,30],
[7,8,21,22,34,46,6],
[14,20,28,33,41,48,40],
[12,16,19,23,28,32,27],
[1,17,20,34,43,44,42],
[5,30,38,43,44,47,14],
[4,16,19,27,41,44,25],
[3,18,21,25,31,42,26],
[24,25,34,35,44,49,30],
[1,13,19,21,38,49,23],
[7,16,32,37,38,46,22],
[3,4,5,26,45,48,14],
[11,15,33,41,43,48,27],
[8,25,26,28,38,43,22],
[8,11,13,30,34,49,2],
[14,20,21,31,34,42,25],
[3,6,13,24,37,43,30],
[4,20,34,35,40,47,3],
[14,16,24,25,43,44,3],
[2,3,15,28,46,48,33],
[3,17,20,22,45,46,30],
[5,12,14,20,27,46,26],
[3,4,11,23,44,47,24],
[10,11,19,23,30,38,13],
[5,9,13,22,34,39,40],
[2,17,23,32,36,40,3],
[10,16,34,41,45,47,7],
[7,11,12,19,21,39,49],
[9,21,29,33,35,48,28],
[12,20,24,35,39,47,15],
[3,14,17,21,28,49,12],
[11,18,26,31,39,44,24],
[10,11,22,41,44,46,35],
[7,21,27,33,46,47,4],
[1,2,7,16,24,34,36],
[16,21,30,36,38,47,48],
[12,20,31,32,35,45,18],
[7,19,20,28,30,31,29],
[13,14,21,31,38,44,22],
[1,6,13,17,34,44,38],
[2,8,16,32,33,37,5],
[2,5,6,7,16,29,35],
[7,13,23,30,32,48,36],
[10,15,22,38,42,43,18],
[6,9,21,35,48,49,29],
[9,10,20,21,38,39,49],
[4,5,8,12,34,37,24],
[19,22,27,29,45,48,4],
[13,15,30,36,44,49,37],
[10,14,23,29,40,42,11],
[4,13,34,36,42,48,19],
[2,5,8,12,20,49,47],
[8,16,21,32,38,48,11],
[3,4,19,24,26,34,38],
[21,24,36,38,39,44,49],
[21,23,32,33,36,42,20],
[9,15,36,38,46,48,22],
[14,18,33,34,35,46,42],
[6,13,23,25,44,48,11],
[2,8,20,24,37,39,18],
[1,19,23,24,32,40,35],
[2,11,25,28,36,46,42],
[4,12,19,20,27,49,21],
[20,26,28,32,40,45,43],
[6,7,12,15,27,36,29],
[11,20,28,29,44,49,40],
[1,3,25,27,28,45,12],
[2,10,16,35,46,47,49],
[3,5,14,15,39,41,21],
[5,8,30,34,45,48,3],
[16,24,28,35,45,46,38],
[14,21,25,27,44,46,3],
[21,25,28,33,46,48,10],
[3,6,13,38,43,44,31],
[8,21,25,32,34,45,31],
[4,10,21,30,35,43,7],
[4,6,29,34,36,45,47],
[9,12,13,22,30,31,28],
[17,24,38,44,46,47,27],
[16,18,21,25,35,46,13],
[5,10,18,24,27,49,39],
[23,25,35,39,42,43,14],
[3,8,15,16,17,38,35],
[1,6,19,26,28,41,39],
[3,23,33,36,41,49,2],
[9,14,24,30,33,48,43],
[3,4,16,30,34,39,14],
[17,26,29,32,48,49,40],
[1,2,5,7,16,45,33],
[11,16,19,21,30,33,31],
[6,9,11,20,27,44,42],
[3,6,22,24,45,47,7],
[9,15,24,27,44,45,47],
[12,20,39,44,47,49,45],
[13,20,38,39,41,45,46],
[18,21,22,34,42,43,24],
[8,14,24,29,36,43,31],
[3,4,17,30,35,47,10],
[11,13,15,19,21,29,41],
[7,13,15,35,38,45,32],
[18,28,30,33,34,36,2],
[1,5,29,32,39,44,4],
[8,20,30,34,42,48,36],
[5,9,22,26,27,40,13],
[7,8,12,14,23,32,5],
[2,12,33,40,45,47,9],
[8,18,20,25,30,39,13],
[1,2,6,37,40,43,24],
[1,2,10,23,32,49,26],
[8,13,15,35,44,45,47],
[4,8,15,18,30,45,38],
[6,9,11,29,43,47,8],
[2,5,7,18,30,45,11],
[6,8,11,32,34,41,47],
[2,11,12,22,24,25,3],
[3,5,20,30,33,38,28],
[1,8,33,37,42,47,7],
[12,18,20,28,33,47,25],
[11,28,36,38,44,48,26],
[6,11,16,20,43,45,21],
[18,20,24,36,44,45,39],
[18,22,40,41,48,49,42],
[16,18,27,35,42,44,33],
[9,24,29,32,34,47,42],
[9,10,25,40,48,49,32],
[6,16,19,34,35,46,9],
[4,11,14,41,42,44,10],
[8,9,10,22,33,40,28],
[15,21,24,25,28,31,48],
[10,17,25,26,39,44,7],
[17,21,22,36,41,44,38],
[9,20,30,33,38,39,37],
[13,15,25,40,41,48,19],
[12,13,31,33,35,47,21],
[13,15,24,28,41,45,20],
[10,20,24,28,33,45,19],
[4,14,28,42,43,47,3],
[6,16,27,34,44,48,1],
[5,10,11,25,27,44,7],
[7,12,13,25,34,38,15],
[4,10,28,37,42,48,8],
[4,5,6,22,31,46,47],
[20,22,31,33,39,44,10],
[18,27,28,34,35,45,2],
[1,14,16,25,40,48,17],
[7,11,15,38,39,46,25],
[2,12,19,33,34,48,24],
[17,18,26,30,33,34,29],
[1,4,22,30,33,34,26],
[4,21,22,35,36,46,40],
[8,17,28,34,39,40,14],
[2,7,9,22,32,46,26],
[8,10,16,30,39,40,6],
[9,10,23,28,37,46,34],
[6,15,16,18,37,43,2],
[4,10,15,16,24,28,49],
[2,11,12,25,36,43,10],
[1,4,9,17,35,41,37],
[3,5,17,22,25,27,46],
[5,13,21,25,38,40,17],
[1,11,13,23,35,36,34],
[1,4,13,22,32,41,26],
[15,16,20,26,36,40,46],
[12,16,34,36,42,45,41],
[5,6,8,10,31,36,17],
[9,22,28,32,37,39,47],
[9,13,29,30,39,45,48],
[3,15,16,39,41,42,36],
[2,26,31,32,36,37,12],
[4,5,18,23,32,44,6],
[7,17,34,41,43,49,1],
[2,6,13,25,30,33,20],
[1,4,8,21,22,24,46],
[22,26,27,28,36,47,12],
[10,12,19,25,42,46,37],
[22,23,35,40,41,42,16],
[5,9,13,15,21,23,12],
[14,20,28,31,32,47,18],
[4,5,11,17,24,48,46],
[12,25,32,33,34,35,45],
[4,11,15,26,28,30,13],
[10,33,40,43,45,49,38],
[4,14,15,19,41,42,10],
[13,20,23,24,46,47,39],
[16,18,22,23,35,38,25],
[7,8,10,13,20,38,5],
[2,5,17,22,27,28,37],
[9,19,28,29,38,40,33],
[9,24,32,34,43,47,35],
[4,11,23,32,44,48,49],
[12,14,21,27,38,43,15],
[8,9,18,33,41,43,15],
[1,5,26,28,40,49,15],
[3,10,26,33,42,46,44],
[12,16,31,34,42,48,37],
[4,11,12,24,35,46,3],
[13,16,24,26,40,44,42],
[10,12,24,25,26,33,23],
[10,13,35,38,42,44,27],
[7,12,16,17,20,25,31],
[9,11,14,22,27,49,44],
[18,24,28,31,39,49,44],
[11,12,15,21,38,42,25],
[9,16,28,36,42,45,2],
[2,7,20,23,44,47,30],
[7,10,15,37,42,45,41],
[5,10,13,43,44,45,7],
[16,18,19,36,42,47,46],
[21,27,28,33,37,48,13],
[21,32,36,37,44,46,47],
[5,17,22,34,38,48,2],
[3,7,15,25,26,47,10],
[2,13,15,38,39,44,8],
[3,7,14,21,25,29,6],
[11,13,41,42,43,49,29],
[7,10,12,16,26,49,40],
[6,8,30,34,36,42,12],
[1,8,28,31,36,45,9],
[12,19,21,24,36,49,23],
[3,4,7,8,26,36,31],
[3,13,20,24,43,48,49],
[12,17,29,31,41,47,38],
[1,3,5,20,35,39,28],
[30,31,35,40,42,48,6],
[6,17,18,19,20,42,25],
[10,11,31,34,37,38,14],
[21,24,26,42,43,46,4],
[9,12,26,29,44,45,19],
[4,12,20,37,42,47,35],
[2,5,10,27,36,46,7],
[6,11,16,29,30,37,34],
[2,6,9,16,39,49,29],
[2,5,13,37,42,44,27],
[7,26,30,33,34,38,5],
[12,15,17,30,31,43,46],
[1,5,11,23,34,47,14],
[4,21,25,29,32,37,27],
[14,17,23,24,25,37,34],
[1,18,22,27,45,48,25],
[6,8,12,16,32,49,37],
[2,6,10,20,38,40,46],
[13,17,25,27,46,49,19],
[6,9,23,25,41,43,38],
[10,12,20,22,25,33,27],
[17,18,28,32,33,48,37],
[15,20,28,29,42,46,35],
[14,22,28,33,44,46,25],
[2,10,12,21,25,35,26],
[7,9,10,14,22,31,35],
[2,17,23,30,34,41,14],
[5,7,17,18,27,48,30],
[13,16,17,18,22,45,10],
[11,34,36,43,47,49,21],
[5,7,14,17,46,47,27],
[6,15,25,29,32,46,9],
[4,5,10,13,28,35,12],
[17,18,20,26,31,32,6],
[8,16,21,30,42,46,32],
[5,7,9,13,15,29,47],
[14,15,16,25,27,30,11],
[1,2,14,37,43,49,24],
[16,21,27,37,40,43,14],
[10,21,24,33,40,47,5],
[8,18,19,28,37,44,13],
[3,14,16,18,38,49,29],
[8,15,31,35,42,44,39],
[10,19,25,32,33,37,27],
[1,25,30,33,39,40,7],
[14,15,28,31,32,48,40],
[12,19,24,43,46,47,30],
[1,4,12,14,35,47,33],
[2,25,30,36,37,43,22],
[6,8,10,21,25,29,33],
[1,7,14,31,34,42,16],
[12,14,17,20,40,48,19],
[1,7,13,32,35,39,31],
[3,4,13,29,31,41,46],
[17,18,21,25,40,48,16],
[1,8,20,27,33,36,35],
[1,4,13,27,47,49,33],
[7,26,29,32,33,37,31],
[2,20,22,30,40,45,44],
[6,35,41,42,44,47,19],
[2,12,17,27,32,33,44],
[8,16,19,33,35,46,12],
[2,6,17,24,37,49,46],
[7,15,32,33,34,43,10],
[21,36,41,42,46,49,6],
[3,5,9,19,48,49,26],
[7,8,15,32,34,39,43],
[4,10,12,14,29,48,3],
[16,23,29,30,37,38,33],
[9,10,11,20,26,44,31],
[3,19,29,36,47,49,33],
[16,26,30,37,43,47,31],
[1,13,39,40,41,43,18],
[11,14,28,29,37,41,19],
[6,9,17,18,29,34,42],
[12,19,22,36,40,47,25],
[4,9,34,39,48,49,18],
[1,5,8,17,20,37,33],
[26,29,34,35,37,47,8],
[2,12,14,23,40,46,39],
[12,13,26,33,42,49,48],
[5,14,22,24,27,45,8],
[4,10,24,29,33,35,7],
[10,16,20,39,45,46,47],
[6,10,12,26,28,35,24],
[3,19,42,44,48,49,38],
[12,13,20,28,41,43,23],
[3,16,32,38,40,48,27],
[6,16,20,25,27,45,29],
[4,15,17,22,34,43,35],
[3,12,40,43,48,49,32],
[7,25,27,36,39,42,31],
[11,14,34,36,43,46,1],
[26,28,37,43,45,47,25],
[15,18,24,27,39,49,6],
[11,17,24,27,31,38,49],
[25,29,32,33,37,44,47],
[4,12,14,24,32,38,13],
[10,14,26,29,30,31,18],
[2,5,27,32,42,46,16],
[23,26,27,37,42,46,15],
[4,8,14,23,48,49,11],
[7,9,27,31,36,39,32],
[1,9,15,31,33,41,37],
[5,14,31,32,36,46,11],
[5,7,8,18,24,29,14],
[3,22,23,26,42,48,28],
[12,22,27,35,44,48,38],
[11,13,15,31,37,47,19],
[1,4,15,17,36,42,40],
[4,5,21,31,36,38,14],
[1,3,14,16,24,41,13],
[1,9,30,40,41,48,49],
[1,20,28,30,42,43,10],
[2,5,9,32,41,42,44],
[3,11,13,23,40,49,43],
[1,2,9,17,22,25,8],
[4,16,22,27,38,39,36],
[10,14,32,36,37,38,47],
[14,17,34,37,43,48,20],
[15,23,26,38,46,47,21],
[2,20,40,42,47,48,28],
[18,24,25,30,31,35,36],
[2,17,37,40,45,49,48],
[3,17,24,30,31,44,7],
[3,4,15,16,23,45,21],
[3,18,21,41,44,45,15],
[1,30,32,35,37,44,40],
[4,8,13,19,44,48,27],
[10,11,25,33,40,46,6],
[3,13,19,20,36,39,15],
[2,10,28,32,37,47,31],
[4,14,19,24,26,48,35],
[3,10,16,30,34,44,1],
[2,4,14,30,39,41,49],
[9,17,28,31,35,37,19],
[10,16,33,34,44,47,6],
[9,12,21,27,37,45,7],
[9,12,16,24,34,35,7],
[9,20,22,32,35,41,8],
[11,16,26,38,45,49,5],
[2,10,12,30,37,39,48],
[10,23,33,36,39,44,30],
[2,6,13,16,30,36,25],
[1,14,28,29,37,43,30],
[2,8,15,26,37,45,14],
[9,12,22,27,36,47,46],
[1,17,28,32,39,40,16],
[1,3,12,29,36,41,14],
[20,21,32,35,46,47,3],
[12,14,17,23,24,45,42],
[6,14,16,28,41,45,27],
[6,18,20,28,43,45,13],
[4,18,21,31,42,49,25],
[11,24,31,45,46,47,6],
[10,19,38,39,44,45,31],
[4,9,25,26,27,28,3],
[22,33,36,43,48,49,25],
[2,10,12,18,24,33,11],
[7,23,35,42,45,49,36],
[22,28,35,36,44,45,6],
[11,20,21,26,34,49,4],
[1,9,18,25,37,48,14],
[2,17,23,35,42,48,27],
[2,15,21,24,29,46,27],
[7,10,17,19,20,22,30],
[4,6,15,28,30,33,27],
[2,3,16,17,24,32,40],
[6,10,20,27,39,46,38],
[3,13,16,19,27,33,22],
[11,16,19,21,38,46,34],
[5,9,15,24,28,35,44],
[8,26,39,40,41,43,5],
[2,23,24,29,33,35,14],
[3,5,24,26,31,40,45],
[15,21,23,25,34,45,35],
[2,14,30,32,36,45,11],
[19,23,25,40,46,49,30],
[7,10,24,25,27,29,19],
[20,21,35,37,47,48,14],
[26,27,32,33,37,45,39],
[11,13,15,39,48,49,37],
[2,3,4,16,26,36,45],
[4,20,27,30,31,37,18],
[5,20,37,38,43,48,6],
[4,5,18,21,27,31,7],
[8,20,23,34,37,49,44],
[3,17,18,26,28,44,38],
[9,15,16,17,18,37,33],
[9,11,27,31,33,34,21],
[3,16,36,39,42,44,17],
[4,15,16,28,39,45,25],
[9,16,30,31,38,41,46],
[6,16,31,32,44,49,43],
[1,36,38,43,46,49,21],
[7,9,12,40,42,44,14],
[4,9,20,32,42,43,5],
[4,21,25,45,47,49,6],
[12,13,18,41,43,49,39],
[4,14,31,39,43,47,27],
[1,8,15,19,20,33,47],
[6,14,15,38,46,49,29],
[10,19,24,28,31,34,27],
[1,8,17,30,36,46,16],
[5,18,24,26,41,44,20],
[1,16,17,19,26,46,29],
[1,17,24,29,39,40,21],
[2,15,19,34,42,45,14],
[3,6,21,33,34,43,9],
[9,10,12,31,34,44,18],
[3,18,20,21,30,41,13],
[3,6,8,23,25,49,4],
[12,27,35,44,47,49,36],
[1,8,17,32,39,43,48],
[3,8,10,25,29,34,32],
[18,19,21,28,47,49,46],
[13,31,32,35,39,42,16],
[4,9,14,26,30,42,21],
[4,22,25,37,38,42,20],
[8,18,19,29,31,34,36],
[2,9,29,43,46,47,21],
[1,20,22,25,34,47,17],
[6,15,30,38,47,48,40],
[9,10,22,24,43,44,30],
[5,9,34,36,41,49,26],
[1,10,31,41,44,47,18],
[1,11,24,35,44,45,49],
[4,20,27,33,41,46,12],
[24,28,35,37,42,48,38],
[8,9,11,16,17,38,20],
[1,3,6,7,15,27,30],
[4,6,9,29,31,36,20],
[14,17,26,32,35,41,15],
[1,11,29,40,43,44,4],
[33,39,40,43,48,49,34],
[3,6,7,9,11,28,34],
[13,25,26,29,30,39,19],
[22,25,35,36,39,47,31],
[3,15,18,26,45,49,41],
[17,22,31,39,45,47,49],
[6,21,29,39,40,47,33],
[1,14,26,28,31,48,36],
[8,12,19,39,48,49,17],
[7,10,17,18,28,30,6],
[1,7,22,28,29,49,37],
[21,25,26,33,35,39,17],
[3,6,17,18,42,43,36],
[24,25,28,35,38,47,16],
[9,14,29,30,32,36,20],
[3,6,10,14,15,20,33],
[1,16,25,33,41,49,46],
[13,14,15,31,46,48,36],
[9,14,30,31,32,49,1],
[10,16,22,26,31,42,23],
[1,6,31,41,42,49,44],
[3,10,20,30,41,44,31],
[13,15,23,25,26,29,9],
[4,11,15,19,32,44,42],
[5,6,12,23,38,39,48],
[6,8,10,19,20,22,42],
[8,12,31,33,42,44,49],
[1,3,7,22,28,36,21],
[20,23,27,32,34,49,30],
[6,8,17,22,28,32,20],
[3,17,20,26,33,47,34],
[14,18,28,32,36,46,44],
[3,18,19,20,37,47,25],
[7,14,18,23,32,46,42],
[14,26,28,38,39,45,8],
[1,4,15,38,40,46,49],
[6,9,27,29,43,47,17],
[7,19,28,33,43,45,13],
[1,3,4,26,34,37,14],
[16,34,37,42,47,48,17],
[17,20,29,35,38,40,22],
[23,25,34,40,42,46,39],
[11,14,16,29,31,46,30],
[9,22,23,31,45,47,39],
[9,14,27,29,42,45,44],
[3,11,26,32,35,43,1],
[1,14,21,35,39,40,5],
[15,18,22,24,42,44,28],
[10,16,20,28,32,48,30],
[9,17,26,36,40,48,2],
[1,23,27,36,45,49,7],
[15,17,22,27,36,46,23],
[1,4,5,6,9,25,27],
[3,8,10,25,26,40,38],
[12,24,27,45,47,49,6],
[11,12,16,18,23,31,36],
[4,14,24,30,43,48,34],
[7,18,27,32,42,48,17],
[2,11,16,19,44,47,27],
[1,6,11,16,20,25,22],
[12,14,15,16,22,34,13],
[5,9,14,24,29,37,36],
[1,10,29,40,44,49,33],
[1,5,28,31,44,46,14],
[4,18,24,30,31,49,36],
[4,7,16,23,26,28,9],
[14,15,17,22,38,48,19],
[7,20,23,29,35,41,6],
[9,10,15,33,40,49,48],
[4,5,14,17,22,39,9],
[11,15,21,27,38,43,48],
[8,16,29,40,46,47,18],
[11,18,20,24,29,49,2],
[2,3,25,28,35,43,39],
[10,12,16,29,41,48,25],
[2,7,11,15,17,27,4],
[2,4,9,31,33,46,5],
[4,6,19,25,34,43,17],
[12,17,31,38,44,45,43],
[10,15,26,35,40,44,11],
[6,9,17,25,33,42,27],
[1,4,13,22,39,42,34],
[3,12,15,28,29,34,8],
[6,9,31,41,45,47,18],
[3,4,15,16,17,46,12],
[13,15,17,30,38,45,4],
[9,18,24,34,40,43,28],
[8,9,24,35,39,41,2],
[4,6,8,35,36,43,5],
[7,8,26,31,35,39,37],
[10,11,23,26,28,30,17],
[1,4,15,16,18,36,21],
[12,19,23,30,35,36,15],
[11,14,21,22,32,49,7],
[5,18,19,32,40,44,34],
[3,12,30,35,37,38,18],
[11,16,24,27,36,48,47],
[4,8,10,35,46,47,32],
[3,8,12,18,22,33,37],
[5,19,31,32,34,45,13],
[2,17,23,39,47,48,22],
[16,22,27,35,38,46,32],
[8,20,26,36,44,47,28],
[2,29,41,42,45,48,5],
[1,2,3,9,20,49,24],
[2,4,20,22,30,37,1],
[3,12,19,21,31,48,26],
[2,8,14,25,43,44,11],
[3,4,7,24,27,31,13],
[3,6,19,21,31,49,7],
[2,9,24,34,41,45,48],
[14,19,20,21,29,49,7],
[17,25,32,33,46,48,39],
[5,6,25,30,32,48,45],
[1,6,9,11,33,39,40],
[4,7,29,39,44,47,23],
[12,18,23,24,46,49,14],
[9,27,28,32,34,43,2],
[4,12,25,34,36,40,49],
[8,14,21,41,45,48,34],
[18,21,28,33,41,47,48],
[6,9,29,31,42,47,14],
[2,15,28,41,42,49,24],
[15,22,30,33,34,47,38],
[1,6,38,41,43,45,48],
[7,10,11,18,37,47,4],
[10,16,17,27,36,38,47],
[13,17,26,28,32,34,6],
[8,20,21,24,34,47,10],
[2,3,4,15,23,40,13],
[9,22,26,30,44,49,31],
[2,11,20,37,45,47,13],
[7,12,24,39,43,48,30],
[18,20,36,41,46,48,21],
[3,5,25,26,29,30,31],
[9,26,28,35,45,47,25],
[15,26,31,37,44,47,43],
[1,6,8,28,37,39,42],
[1,12,33,36,46,48,41],
[15,18,24,28,34,42,2],
[1,20,28,30,34,40,19],
[26,28,30,34,36,39,1],
[8,17,23,40,41,43,28],
[11,28,29,41,45,47,21],
[4,19,31,34,37,44,6],
[4,6,10,14,16,29,26],
[9,17,27,35,39,44,40],
[5,6,11,26,33,41,4],
[1,3,11,18,40,46,35],
[15,17,21,22,27,36,16],
[1,10,12,13,29,47,9],
[12,24,25,33,37,44,13],
[2,8,16,17,20,26,32],
[1,3,10,15,17,40,28],
[1,4,17,20,28,32,47],
[2,13,33,35,38,49,40],
[15,26,27,38,42,43,39],
[6,7,18,21,27,48,42],
[16,20,22,31,42,48,43],
[4,11,25,27,39,41,43],
[4,7,12,15,27,34,37],
[6,13,33,38,41,43,29],
[20,24,34,36,43,45,3],
[9,12,15,19,21,47,38],
[7,11,15,21,26,34,38],
[7,17,24,29,47,49,45],
[3,7,21,22,38,47,27],
[13,15,25,28,45,47,5],
[1,7,12,17,36,38,48],
[7,10,22,32,34,48,45],
[5,6,13,19,23,34,8],
[2,13,16,34,37,47,28],
[5,11,12,31,41,42,16],
[10,13,20,22,42,46,48],
[2,9,13,40,44,46,10],
[8,15,20,41,42,49,12],
[9,11,12,22,28,49,7],
[2,10,16,23,35,47,1],
[18,25,38,40,44,45,5],
[9,11,13,22,24,44,32],
[10,11,15,22,23,45,31],
[7,19,23,30,34,45,13],
[9,20,30,34,35,46,29],
[8,11,17,24,30,49,3],
[2,6,16,24,41,46,27],
[2,13,33,39,40,44,43],
[4,7,13,28,36,49,3],
[1,4,5,22,44,46,37],
[2,3,11,24,26,27,44],
[6,10,12,14,31,38,20],
[10,13,28,32,37,41,1],
[3,6,14,19,27,36,24],
[6,19,26,28,37,49,47],
[9,14,17,34,40,48,39],
[2,5,8,13,17,35,28],
[10,13,26,40,42,48,24],
[2,4,6,7,13,29,9],
[7,14,16,25,30,36,32],
[8,15,18,37,39,44,6],
[4,17,20,29,39,48,9],
[10,21,26,34,35,43,37],
[9,14,19,20,43,47,37],
[4,9,24,31,39,47,38],
[8,18,20,22,31,37,46],
[9,10,20,22,38,49,7],
[2,5,8,29,40,47,34],
[1,8,22,26,32,37,41],
[3,17,23,26,41,47,33],
[1,10,15,21,27,37,40],
[5,14,16,22,23,33,32],
[16,21,30,34,39,45,4],
[13,17,23,32,34,46,41],
[4,9,10,17,33,34,35],
[4,11,17,29,39,49,8],
[2,20,28,46,47,49,3],
[5,17,19,26,32,33,22],
[11,17,19,20,29,32,38],
[7,10,11,17,22,30,14],
[1,17,28,29,31,34,45],
[1,3,11,21,41,42,2],
[5,12,13,20,37,41,23],
[6,7,17,19,35,46,4],
[3,15,19,20,32,40,25],
[2,11,16,17,25,28,41],
[4,11,16,26,42,47,6],
[3,14,22,24,34,49,44],
[13,15,17,18,41,45,14],
[20,21,28,44,46,47,42],
[11,19,30,33,37,44,18],
[10,16,21,28,29,31,8],
[2,7,17,25,30,43,38],
[3,23,32,35,43,49,34],
[2,35,38,47,48,49,41],
[11,13,18,29,44,46,37],
[4,6,13,18,23,45,15],
[4,28,31,34,48,49,6],
[7,8,26,43,47,48,12],
[10,23,33,39,42,48,34],
[3,5,9,17,35,36,43],
[3,7,28,31,33,36,32],
[1,3,4,8,21,28,5],
[25,30,31,34,40,47,13],
[8,9,24,28,37,49,47],
[12,14,24,26,27,49,22],
[1,5,15,22,43,47,37],
[1,11,12,15,35,49,17],
[5,12,16,17,41,46,15],
[4,12,18,25,42,44,8],
[10,14,21,37,39,49,25],
[7,9,33,34,39,41,48],
[3,12,20,33,34,41,43],
[11,16,30,34,41,45,47],
[6,12,16,20,27,38,7],
[14,20,21,38,45,46,47],
[22,27,28,29,42,46,49],
[3,10,11,17,29,34,15],
[10,14,18,20,34,47,41],
[1,2,14,18,25,39,31],
[16,23,24,35,36,44,1],
[10,13,20,24,29,36,14],
[15,27,32,36,44,48,47],
[3,20,26,31,32,35,12],
[3,7,10,31,32,35,30],
[9,11,33,43,46,48,2],
[5,12,31,34,37,45,10],
[2,3,27,40,44,49,38],
[7,10,21,23,29,39,1],
[8,30,31,37,38,48,5],
[1,4,17,24,27,43,41],
[5,16,18,28,37,49,24],
[26,29,31,37,43,49,2],
[1,2,23,35,38,46,5],
[9,21,29,34,43,47,32],
[3,25,32,36,38,40,31],
[3,14,21,25,27,42,34],
[5,20,22,28,36,48,1],
[1,2,5,6,11,43,25],
[2,3,9,18,23,37,31],
[1,3,8,22,28,33,5],
[3,6,13,37,40,42,29],
[4,22,33,39,42,47,14],
[3,5,19,35,38,41,32],
[7,21,24,31,43,47,5],
[10,12,13,14,22,47,21],
[3,6,23,24,42,44,35],
[7,11,14,25,26,30,29],
[10,17,29,33,42,48,35],
[4,7,9,20,37,49,33],
[2,23,30,34,40,42,48],
[1,3,7,11,16,34,49],
[1,3,21,34,41,44,43],
[8,15,19,21,24,44,10],
[5,12,15,17,18,39,47],
[1,9,22,43,46,48,49],
[17,22,26,27,29,35,44],
[1,11,18,20,26,30,47],
[2,16,23,32,34,35,40],
[4,9,23,37,47,48,14],
[11,24,28,37,41,43,13],
[2,8,28,30,33,40,23],
[2,6,22,25,33,39,46],
[4,8,24,26,37,41,33],
[1,4,9,15,37,39,47],
[9,14,22,37,41,45,5],
[4,22,23,37,40,49,13],
[6,16,18,28,34,40,38],
[8,10,19,27,39,44,6],
[10,27,33,40,47,48,13],
[6,12,14,25,35,43,42],
[5,7,13,29,41,49,25],
[11,13,16,19,28,46,22],
[15,19,36,44,45,49,16],
[14,18,22,30,39,44,32],
[1,4,7,21,23,44,17],
[4,18,21,22,39,46,29],
[2,29,33,34,44,49,42],
[9,15,24,46,48,49,6],
[9,10,19,27,29,45,30],
[6,10,17,20,25,28,2],
[11,24,25,36,41,45,40],
[13,15,17,23,26,47,1],
[5,14,17,43,45,49,12],
[5,8,9,10,22,38,7],
[11,18,23,31,37,49,10],
[4,6,7,25,35,37,48],
[5,6,11,25,45,48,34],
[9,30,31,34,42,45,24],
[2,11,25,32,34,39,31],
[11,14,21,24,25,47,36],
[6,29,44,45,46,47,30],
[11,21,30,36,42,47,34],
[15,25,26,34,35,41,10],
[7,8,27,29,37,48,21],
[6,18,26,28,30,49,22],
[3,10,31,40,41,43,20],
[11,17,20,31,48,49,35],
[11,13,33,37,45,48,36],
[16,18,28,33,41,45,29],
[1,10,11,13,42,48,15],
[10,14,29,35,40,46,30],
[9,16,22,28,30,32,37],
[5,13,31,33,34,35,27],
[10,20,40,46,48,49,13],
[4,15,17,43,45,47,38],
[4,23,24,30,34,45,19],
[2,15,27,32,43,49,42],
[9,10,16,21,32,47,38],
[14,16,38,44,48,49,39],
[4,12,26,44,47,48,2],
[12,13,19,22,39,48,46],
[1,4,13,17,35,44,22],
[3,5,6,15,39,42,35],
[22,24,33,36,42,49,38],
[7,8,33,36,46,49,18],
[2,7,18,23,39,47,17],
[1,4,10,24,30,39,8],
[7,13,34,38,43,44,10],
[5,6,22,37,44,48,23],
[11,20,31,33,39,48,4],
[15,17,22,36,45,47,35],
[13,15,18,30,32,48,8],
[12,14,27,35,46,49,31],
[4,10,15,22,33,35,48],
[4,9,25,28,39,45,30],
[10,14,26,29,39,41,6],
[5,6,15,20,32,48,22],
[2,3,13,23,34,38,5],
[9,10,23,29,30,34,36],
[1,6,15,30,33,49,3],
[11,15,25,29,30,49,47],
[2,4,26,30,31,43,38],
[1,6,9,10,22,26,35],
[1,8,18,20,22,46,28],
[1,16,17,26,31,36,45],
[12,14,23,32,37,39,28],
[2,4,9,12,21,31,10],
[6,10,24,34,37,47,12],
[1,5,21,26,31,43,22],
[8,10,26,29,41,44,9],
[3,12,15,31,36,49,11],
[6,23,24,38,39,40,32],
[1,2,9,20,24,49,43],
[2,12,20,25,31,47,29],
[10,16,17,38,42,43,13],
[18,24,26,34,38,45,15],
[8,12,24,31,33,41,20],
[4,5,23,31,39,48,20],
[4,11,15,16,35,42,9],
[6,14,26,27,30,43,21],
[2,6,21,45,46,49,28],
[4,15,23,33,37,47,22],
[2,7,16,25,29,34,10],
[8,9,13,17,33,49,30],
[4,25,30,41,43,45,29],
[1,24,28,33,37,47,49],
[7,26,27,29,30,41,44],
[3,8,21,22,28,48,5],
[13,16,18,23,34,42,40],
[9,24,25,30,35,37,45],
[16,17,18,27,38,41,30],
[10,13,20,24,37,47,16],
[2,3,9,18,20,36,12],
[11,21,27,28,32,34,17],
[1,2,16,27,31,47,19],
[6,8,10,28,36,37,21],
[1,8,22,32,46,48,9],
[5,8,9,10,29,49,46],
[1,6,14,25,29,35,48],
[9,14,16,17,21,26,20],
[1,15,30,39,45,49,37],
[5,21,28,30,37,42,48],
[9,15,21,31,33,41,37],
[13,18,29,31,32,46,2],
[17,19,25,36,40,44,10],
[1,2,29,37,42,48,38],
[10,12,18,21,27,33,4],
[4,7,14,15,19,26,43],
[4,9,16,20,38,39,40],
[1,13,20,24,37,39,3],
[4,13,18,20,36,39,12],
[8,23,28,31,36,37,12],
[1,2,4,13,43,48,11],
[3,4,15,24,35,41,36],
[4,5,12,16,18,41,7],
[15,19,34,39,44,45,23],
[12,13,18,19,27,29,10],
[3,7,28,29,38,48,40],
[15,18,22,24,27,30,10],
[4,10,20,25,33,36,37],
[12,13,18,20,28,48,14],
[9,10,20,42,46,47,27],
[6,11,17,31,40,41,34],
[3,14,16,19,45,48,9],
[13,17,25,26,43,44,42],
[17,22,28,31,39,45,8],
[1,10,11,24,30,49,35],
[3,6,9,29,30,33,14],
[6,20,30,33,39,47,23],
[3,12,20,39,46,49,19],
[7,18,21,28,47,48,35],
[5,6,15,28,29,43,48],
[4,15,41,43,45,49,18],
[5,9,25,27,33,44,17],
[5,17,24,25,36,45,15],
[7,8,12,24,30,49,27],
[8,9,17,31,36,47,46],
[3,8,14,20,33,41,32],
[1,28,33,41,42,45,8],
[4,9,23,35,46,49,18],
[2,20,29,38,39,43,37],
[1,29,30,44,45,49,41],
[4,7,10,26,42,47,13],
[9,13,21,24,38,46,27],
[22,37,41,42,44,45,27],
[14,15,21,22,32,40,2],
[5,6,8,16,29,31,12],
[7,16,17,21,27,36,6],
[9,18,21,22,26,29,27],
[7,30,31,42,45,49,46],
[16,23,30,37,39,43,5],
[10,13,23,35,36,48,47],
[12,17,19,26,33,40,25],
[5,8,31,46,47,49,34],
[3,4,7,22,30,39,6],
[10,20,24,35,36,39,12],
[2,4,19,34,37,41,5],
[2,3,16,42,43,45,27],
[17,19,25,34,43,45,47],
[3,7,11,20,23,48,38],
[6,16,39,40,46,49,41],
[1,3,6,7,36,49,42],
[1,7,9,10,36,44,37],
[6,9,11,16,25,37,45],
[18,21,34,37,40,49,28],
[8,12,30,43,46,48,35],
[2,5,8,22,25,35,16],
[6,12,17,34,38,46,43],
[6,17,29,33,42,48,34],
[5,8,12,20,30,39,23],
[3,18,34,41,45,46,37],
[8,30,42,46,48,49,7],
[9,17,26,31,35,36,42],
[12,28,29,33,35,37,22],
[12,13,38,41,44,49,22],
[4,17,23,28,43,46,22],
[6,15,22,25,33,42,24],
[5,13,26,29,40,47,42],
[7,12,30,34,40,48,33],
[2,10,16,18,41,44,31],
[2,3,5,25,43,48,24],
[2,22,25,27,35,42,13],
[4,16,40,43,46,47,27],
[14,17,21,29,42,46,49],
[2,13,14,21,45,49,19],
[8,11,21,38,41,48,49],
[7,13,15,20,21,41,2],
[5,23,26,31,34,49,24],
[2,4,9,20,35,40,44],
[2,8,12,13,27,35,37],
[5,11,15,42,45,48,14],
[5,10,18,21,35,49,11],
[2,11,19,20,21,40,43],
[8,26,32,35,36,49,24],
[7,8,12,21,23,47,10],
[9,15,30,37,38,40,1],
[5,16,19,26,42,44,6],
[7,11,13,24,28,46,26],
[4,16,25,26,33,42,30],
[9,22,28,32,33,49,18],
[14,18,30,40,43,46,27],
[12,17,18,26,29,33,41],
[4,10,11,15,22,37,49],
[4,7,12,20,39,48,14],
[1,29,32,39,44,47,17],
[16,22,31,37,39,49,32],
[15,26,29,34,35,40,9],
[1,5,8,21,27,34,20],
[2,31,37,38,39,40,44],
[19,24,34,40,41,46,15],
[7,16,26,28,41,44,24],
[5,7,24,26,41,49,3],
[3,13,18,21,22,33,8],
[5,12,16,23,29,39,11],
[1,16,23,29,39,46,17],
[6,17,25,27,35,40,32],
[1,2,24,38,42,49,19],
[19,21,30,35,36,37,33],
[31,32,33,37,42,46,17],
[2,7,20,36,38,41,40],
[3,5,25,30,33,37,35],
[11,20,25,35,42,45,8],
[11,23,35,37,40,43,30],
[20,21,23,31,42,43,41],
[2,22,29,31,40,48,20],
[1,3,8,22,36,44,29],
[14,16,29,44,45,47,42],
[7,11,22,27,32,46,17],
[8,12,29,33,39,45,36],
[4,19,30,37,39,41,31],
[4,16,28,37,38,47,30],
[1,4,14,18,22,39,48],
[10,14,35,40,43,48,21],
[9,13,14,17,28,45,20],
[3,12,26,28,31,46,16],
[10,11,24,33,34,38,16],
[1,6,10,21,28,35,46],
[16,17,18,22,25,36,47],
[11,20,31,37,44,47,46],
[8,19,43,44,48,49,46],
[3,4,11,15,32,45,1],
[4,5,7,11,28,32,3],
[1,7,17,20,29,49,19],
[5,21,26,27,28,29,44],
[21,24,27,32,35,36,16],
[4,8,10,13,14,49,7],
[1,5,13,16,24,41,14],
[9,20,25,36,42,47,13],
[1,10,13,14,38,39,41],
[2,4,6,30,32,34,40],
[3,9,15,32,43,46,28],
[8,9,17,31,37,38,2],
[18,19,26,34,39,46,2],
[6,7,17,24,41,48,16],
[2,3,9,24,33,41,40],
[5,18,19,28,35,45,27],
[21,26,27,35,38,48,41],
[9,23,25,29,30,48,1],
[4,8,16,39,40,45,10],
[5,14,16,25,45,48,42],
[5,14,16,22,26,28,27],
[11,13,16,18,21,22,6],
[26,28,31,33,40,41,19],
[9,27,33,38,39,40,14],
[6,17,21,27,36,42,23],
[20,22,26,27,31,44,49],
[6,23,30,33,43,44,10],
[2,4,24,28,32,45,38],
[2,4,30,37,43,49,10],
[10,27,28,40,46,47,18],
[8,9,37,40,46,49,41],
[4,8,15,16,34,49,45],
[6,12,23,29,31,35,21],
[1,14,17,23,35,38,31],
[10,15,20,21,34,46,4],
[4,5,10,17,39,44,24],
[1,5,25,32,38,39,4],
[1,3,9,17,18,42,7],
[7,21,24,33,35,45,26],
[2,8,23,28,38,45,21],
[11,13,19,35,41,45,24],
[2,4,9,28,42,43,45],
[3,6,15,26,28,42,21],
[1,6,9,10,20,46,14],
[2,8,18,22,24,35,17],
[2,17,27,32,35,38,41],
[3,9,13,31,40,42,30],
[3,19,33,42,43,45,44],
[11,25,27,29,30,44,23],
[13,14,15,16,18,44,48],
[13,16,31,35,41,42,36],
[22,25,26,34,41,45,15],
[1,2,24,29,40,47,7],
[8,26,34,36,39,46,35],
[2,4,15,20,32,42,48],
[15,17,22,37,39,47,26],
[13,15,18,36,43,45,7],
[2,12,16,19,20,49,4],
[21,31,33,35,39,44,28],
[12,15,17,24,36,49,14],
[4,6,11,16,22,39,10],
[1,5,15,33,40,48,21],
[1,3,9,30,41,47,19],
[9,19,22,26,34,36,24],
[1,5,9,18,24,32,38],
[20,23,28,37,39,41,26],
[19,21,24,28,30,48,26],
[11,14,16,17,35,49,34],
[1,3,14,17,35,43,47],
[7,29,31,32,33,35,48],
[11,13,16,20,21,28,15],
[9,24,35,40,41,48,31],
[6,9,14,17,47,49,38],
[17,19,22,27,40,46,4],
[4,17,18,26,33,35,40],
[5,8,17,24,30,42,34],
[5,11,12,15,24,32,39],
[3,4,12,29,32,48,16],
[12,15,22,26,27,29,37],
[1,3,15,18,20,33,48],
[6,16,20,23,24,34,42],
[3,6,18,27,29,37,4],
[1,15,23,24,31,39,33],
[5,8,10,11,23,30,42],
[18,28,38,39,47,48,24],
[9,27,32,34,36,37,20],
[1,8,20,45,47,48,11],
[4,11,12,18,21,40,44],
[4,11,20,28,46,49,31],
[4,22,23,31,36,47,20],
[1,3,11,15,39,47,44],
[1,4,6,13,15,48,39],
[24,28,29,38,39,41,19],
[3,5,14,17,29,45,31],
[2,10,19,39,46,47,41],
[2,9,18,21,32,47,26],
[4,24,26,30,31,46,2],
[6,27,30,38,41,47,20],
[2,14,17,19,20,49,26],
[6,19,22,24,29,40,4],
[5,11,15,17,25,46,24],
[16,18,21,26,30,48,45],
[12,19,26,30,36,45,20],
[1,19,34,39,43,48,45],
[7,11,24,32,35,49,46],
[2,11,17,19,22,26,13],
[16,25,27,30,37,41,36],
[12,13,25,39,42,43,38],
[8,11,15,20,33,43,34],
[7,13,16,35,42,46,25],
[1,5,8,23,32,48,3],
[4,9,19,22,24,43,1],
[5,7,18,26,29,47,2],
[9,12,14,20,27,36,11],
[2,12,20,28,46,49,31],
[11,14,19,25,27,47,20],
[1,8,21,32,37,46,22],
[28,33,36,38,40,45,4],
[3,7,11,18,20,27,2],
[6,23,31,43,46,49,40],
[9,25,29,36,38,41,23],
[11,14,21,28,41,48,32],
[2,3,7,9,16,34,14],
[5,29,30,31,41,45,47],
[1,6,18,29,39,48,10],
[8,11,21,30,38,49,35],
[3,7,20,34,36,41,39],
[4,17,34,38,46,49,7],
[15,20,34,42,45,46,23],
[4,18,31,41,42,43,24],
[10,14,22,29,33,48,5],
[1,11,12,19,28,30,49],
[2,7,22,27,41,42,5],
[3,16,25,38,45,47,35],
[7,9,22,29,44,49,1],
[4,21,22,29,41,45,14],
[2,6,10,17,18,46,34],
[7,13,20,33,39,45,30],
[1,7,15,23,29,35,14],
[24,32,36,40,42,43,47],
[5,14,34,36,38,42,19],
[4,12,15,16,38,46,21],
[13,23,27,32,34,43,22],
[6,14,18,21,32,46,43],
[11,12,14,17,21,37,10],
[10,16,19,33,42,43,12],
[2,12,15,16,30,32,5],
[21,27,32,33,39,48,9],
[3,4,11,28,37,40,36],
[2,7,17,20,33,47,45],
[22,25,30,37,38,49,15],
[5,15,22,24,34,46,26],
[14,15,19,23,24,25,2],
[1,9,32,37,38,47,25],
[7,8,14,15,20,21,44],
[6,9,16,26,29,36,8],
[8,12,15,26,39,44,6],
[12,17,31,37,39,46,8],
[10,14,22,28,32,42,36],
[4,6,14,21,24,48,8],
[9,12,42,44,45,48,35],
[3,23,25,36,46,47,20],
[8,12,26,31,44,46,42],
[4,9,10,14,24,29,38],
[6,8,9,17,25,36,4],
[7,13,17,21,42,45,36],
[4,12,19,40,44,47,49],
[5,17,37,38,44,47,12],
[5,13,22,29,34,42,37],
[1,15,16,28,29,47,37],
[6,9,10,12,24,32,30],
[12,15,36,40,41,49,42],
[3,7,16,19,44,47,31],
[18,19,22,33,42,46,7],
[9,14,23,30,42,45,19],
[2,10,16,21,22,30,26],
[4,8,18,29,40,47,9],
[2,17,19,21,24,34,18],
[22,24,26,29,33,48,46],
[6,13,20,26,34,40,10],
[2,22,27,31,40,46,13],
[21,29,32,36,38,44,43],
[1,7,27,36,40,48,13],
[1,10,11,41,47,48,20],
[7,14,21,43,44,47,35],
[4,9,17,26,28,30,1],
[8,10,28,35,37,47,12],
[3,13,29,30,31,43,8],
[5,6,27,33,36,37,48],
[4,6,14,21,36,46,41],
[3,9,18,38,46,48,13],
[1,3,4,17,24,28,7],
[4,13,31,36,40,41,49],
[5,11,18,28,29,32,10],
[2,5,8,24,32,37,35],
[9,10,20,33,34,43,42],
[17,19,20,27,32,35,11],
[1,4,6,15,24,48,43],
[5,6,28,35,42,43,4],
[1,8,20,25,38,43,39],
[11,17,19,23,32,44,25],
[5,13,23,33,37,40,39],
[3,10,11,13,26,48,9],
[3,13,18,20,22,30,39],
[5,9,19,21,27,46,37],
[1,8,9,32,35,37,14],
[3,6,7,9,32,35,24],
[6,21,31,40,42,44,7],
[11,14,19,21,41,44,31],
[8,11,35,37,38,46,27],
[1,2,12,19,27,38,41],
[4,10,26,34,46,49,5],
[4,14,16,19,22,35,9],
[13,17,20,29,32,42,15],
[11,26,27,39,40,47,34],
[7,17,33,36,39,44,31],
[1,4,15,16,29,46,30],
[4,5,10,27,28,49,46],
[2,17,34,38,46,49,33],
[4,9,14,25,36,40,45],
[3,8,9,16,34,46,42],
[2,8,12,20,25,49,34],
[3,7,15,23,29,48,5],
[4,10,18,22,23,38,35],
[7,17,22,26,31,42,12],
[9,13,16,22,24,31,18],
[2,8,10,37,44,49,22],
[1,21,27,31,34,38,10],
[2,13,19,25,30,43,44],
[3,9,10,20,25,34,41],
[1,3,20,21,35,37,46],
[7,19,24,26,32,39,20],
[14,25,32,38,43,46,35],
[16,20,23,27,41,46,6],
[10,11,15,26,28,31,43],
[8,15,19,21,32,42,10],
[3,17,23,24,30,47,26],
[6,11,16,38,42,49,40],
[4,6,8,11,33,35,25],
[1,8,25,33,34,41,28],
[7,15,25,34,35,38,6],
[9,10,12,13,41,48,6],
[5,15,29,31,38,45,48],
[10,29,33,40,43,45,8],
[1,18,24,29,35,46,2],
[15,18,25,27,38,47,2],
[9,17,19,24,38,47,3],
[5,21,25,27,38,40,11],
[5,12,17,18,41,44,32],
[15,18,19,21,24,26,36],
[2,6,7,15,20,38,14],
[3,21,26,29,31,48,1],
[1,2,7,19,28,34,5],
[8,33,39,40,46,48,24],
[8,9,22,27,29,42,38],
[1,5,13,29,34,44,25],
[2,11,18,26,39,45,24],
[3,5,6,13,31,32,15],
[3,15,19,40,41,44,13],
[4,6,9,15,22,37,3],
[2,7,11,20,29,45,48],
[6,11,14,23,39,45,10],
[5,32,33,40,41,49,30],
[11,26,31,34,36,42,13],
[1,6,27,39,44,49,36],
[22,23,24,28,29,43,6],
[1,5,12,14,19,31,45],
[1,19,23,29,34,41,15],
[1,4,6,23,25,47,49],
[3,18,24,45,46,48,31],
[7,21,22,38,45,47,40],
[8,19,26,34,37,40,29],
[5,6,27,41,47,49,40],
[16,24,31,35,37,49,39],
[7,8,13,26,28,49,17],
[1,3,4,5,37,39,8],
[20,22,24,25,40,41,35],
[13,15,17,19,24,32,9],
[8,12,13,25,31,35,21],
[8,14,31,36,40,46,9],
[7,10,16,19,42,46,20],
[7,10,11,27,31,48,5],
[8,25,31,38,43,48,23],
[1,9,22,23,34,38,24],
[11,13,21,36,39,40,43],
[1,6,17,28,36,41,31],
[15,16,27,40,44,49,31],
[6,9,30,32,39,48,4],
[3,4,16,32,45,48,23],
[7,14,15,22,25,35,32],
[13,18,32,38,48,49,40],
[4,12,22,26,33,45,8],
[13,23,28,30,37,44,49],
[8,10,21,22,30,47,28],
[12,28,31,33,36,44,7],
[5,13,15,23,28,40,17],
[16,25,31,36,38,49,29],
[7,12,24,25,39,44,27],
[2,5,13,20,21,49,36],
[5,7,22,30,32,35,13],
[6,8,13,17,35,49,45],
[9,20,23,30,34,39,13],
[2,9,14,24,33,47,48],
[18,22,24,27,30,48,3],
[5,15,29,32,38,39,31],
[2,5,8,22,29,41,28],
[4,6,15,29,33,39,18],
[12,23,31,37,40,45,35],
[7,24,26,30,32,39,47],
[2,16,30,31,38,48,36],
[3,6,36,40,43,48,8],
[1,34,36,37,42,46,39],
[24,32,41,42,48,49,10],
[16,22,24,33,43,44,29],
[13,15,19,22,33,38,39],
[10,23,26,38,42,46,29],
[9,16,17,30,33,49,41],
[4,7,8,20,32,34,24],
[8,19,24,35,36,40,23],
[10,11,15,18,37,45,26],
[8,13,18,22,26,42,43],
[4,20,36,42,46,47,22],
[2,9,14,24,40,45,3],
[3,11,14,32,33,42,15],
[5,8,36,39,42,46,14]]:
with(LinearAlgebra):
PAB := Matrix(50):
for ii from 1 to nops(correlationlist) do
 for jj from 1 to nops(correlationlist[ii]) do
  if correlationlist[ii][jj] <> correlationlist[ii][7] then
   PAB[correlationlist[ii][7],correlationlist[ii][jj]] := PAB[correlationlist[ii][7],correlationlist[ii][jj]] + 1: # group to group relations
  end if:
 od:
od:

getpossiblelist := proc(xx, range1, range2) #usage: PAB[1]
local ii, plist:
plist := []:
for ii from 1 to op(1,xx) do
 if xx[ii] >= range1 and xx[ii] <= range2 then
  plist := [op(plist), ii];
 end if:
od:
return plist:
end proc:
getpossiblelist(PAB[1], 1,3);
interseclist := proc(param1, param2)
return [op({op(param1)} intersect {op(param2)})];
end proc:


PAB := Matrix(50):
for ii from 1 to nops(correlationlist) do
 for jj from 1 to nops(correlationlist[ii]) do
  for kk from 1 to nops(correlationlist) do
   for qq from 1 to nops(correlationlist[kk]) do
    if ii <> kk then
     #print("scan=",correlationlist2[kk],"kk=",kk,"qq=",qq,"row=",correlationlist[ii][jj],"column=",correlationlist[kk][qq]):
     PAB[correlationlist[ii][jj],correlationlist[kk][qq]] := PAB[correlationlist[ii][jj],correlationlist[kk][qq]] + 1: # group to group relations
    end if:
   od:
  od:
 od:
od:
# Correlation need to use global which means all special numbers, specific special number defined as local
totalnumberofnumbers := nops(correlationlist)*6:
PABProb := Matrix(50):
for ii from 1 to op(1,PAB)[1] do
 rowtotal := 0:
 for jj from 1 to op(1,PAB)[2] do
  rowtotal := rowtotal + PAB[ii,jj]:
 od:
 for jj from 1 to op(1,PAB)[2] do
  if rowtotal > 0 then
   PABProb[ii,jj] := evalf(PAB[ii,jj]/rowtotal):
  end if:
 od:
od:

for ii from 1 to 50 do
print(PAB[1,ii]):
od:

with(LinearAlgebra):
PAB2 := Matrix(5):
for ii from 1 to nops(correlationlist2) do
 for jj from 1 to nops(correlationlist2[ii]) do
  for kk from 1 to nops(correlationlist2) do
   for qq from 1 to nops(correlationlist2[kk]) do
    if ii <> kk then
     print("scan=",correlationlist2[kk],"kk=",kk,"qq=",qq,"row=",correlationlist2[ii][jj],"column=",correlationlist2[kk][qq]):
     PAB2[correlationlist2[ii][jj],correlationlist2[kk][qq]] := PAB2[correlationlist2[ii][jj],correlationlist2[kk][qq]] + 1: # group to group relations
    end if:
   od:
  od:
 od:
od:


correlationlist2 := [[1,2,3],[1,3,5]]:
correlationlist2 := [[2,1,3],[2,2,3],[1,3,3]]:
PAB2 := Matrix(5):
for ii from 1 to nops(correlationlist2) do
 for jj from 1 to nops(correlationlist2[ii]) do
  if correlationlist2[ii][jj] <> correlationlist2[ii][3] then
   PAB2[correlationlist2[ii][3],correlationlist2[ii][jj]] := PAB2[correlationlist2[ii][3],correlationlist2[ii][jj]] + 1: # group to group relations
  end if:
 od:
od:
PAB2;



for ii from 1 to op(1,PAB2)[1] do
 rowtotal := 0:
 for jj from 1 to op(1,PAB2)[2] do
  rowtotal := rowtotal + PAB2[ii,jj]:
 od:
 print(rowtotal):
od:

